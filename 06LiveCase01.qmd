# Case Study: Analyze recent S&P500 Data


## S&P 500

The S&P 500, also called the Standard & Poor's 500, is a stock market index that tracks the performance of 500 major publicly traded companies listed on U.S. stock exchanges. It serves as a widely accepted benchmark for assessing the overall health and performance of the U.S. stock market.

S&P Dow Jones Indices, a division of S&P Global, is responsible for maintaining the index. The selection of companies included in the S&P 500 is determined by a committee, considering factors such as market capitalization, liquidity, and industry representation.

The performance of the S&P 500 is frequently used to gauge the broader stock market and is commonly referenced by investors, analysts, and financial media. It provides a snapshot of how large-cap U.S. stocks are faring and is considered a reliable indicator of overall market sentiment.


## S&P 500 Data

We will analyze a real-world dataset.

The dataset is located in a Google Sheet.
This is the URL of the data we will use: https://docs.google.com/spreadsheets/d/11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM/edit#gid=0

The data is disorganized and challenging to understand.

We will review the data and proceed in a step-by-step manner.



### 1) Read the S&P500 data from a Google Sheet

The Google Sheet ID is: `11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM`. We can use the function `gsheet2tbl` in package `gsheet` to read the Google Sheet into a tibble or dataframe, as demonstrated in the following code.

```{r, warning=FALSE}
# Read S&P500 stock data present in a Google Sheet.
library(gsheet)
prefix <- "https://docs.google.com/spreadsheets/d/"
sheetID <- "11ahk9uWxBkDqrhNm7qYmiTwrlSC53N1zvXYfv7ttOCM"
url500 <- paste(prefix, sheetID) # Form the URL to connect to
sp500 <- gsheet2tbl(url500) # Read it into a tibble called sp500
```

### 2) Review the data

We want to understand the different data columns and their data structure.
For this purpose, we run the `str()` function.


```{r, warning=FALSE}
str(sp500)
```

The `str(sp500)` output provides valuable insights into the structure and data types of the columns in the `sp500` tibble. Let's delve into the details.

The output reveals that `sp500` is a tibble with dimensions \[503 Ã— 36\]. This means it consists of 503 rows, each representing a specific S&P500 stock, and 36 columns containing information about each stock.

Here is a preliminary breakdown of the information associated with each column:

-   The columns labeled `Date`, `Stock`, `Description`, `Sector`, and `Industry` are character columns. They respectively represent the date, stock ticker symbol, description, sector, and industry of each S&P500 stock.

-   Columns such as `Market.Capitalization`, `Price`, `X52.Week.Low`, `X52.Week.High`, and other numeric columns contain diverse financial metrics and stock prices related to the S&P500 stocks.

-   The column labeled `Technical.Rating` is a character column that assigns a technical rating to each stock.

By examining the `str(sp500)` output, we gain a preliminary understanding of the data types and column names present in the `sp500` tibble, enabling us to grasp the structure of the dataset.

### 3) Rename Data Columns

The names of the data columns are lengthy and confusing. 
We will rename the data columns to make it easier to work with the data.


```{r, warning=FALSE, eval=TRUE, echo=FALSE}
suppressPackageStartupMessages(library(dplyr))
```


```{r, warning=FALSE}
# Define a mapping of new column names
new_names <- c(
  "Date", "Stock", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "TechRating"
)
# Rename the columns using the new_names vector
sp500 <- sp500 %>% 
  rename_with(~ new_names, everything())

```

This code is designed to rename the columns of the `sp500` tibble using a predefined mapping of new column names. Let's go through the code step by step:

1.  A vector named `new_names` is created, which contains the desired new names for each column in the `sp500` tibble. Each element in the `new_names` vector corresponds to a specific column in the `sp500` tibble and represents the desired new name for that column.

2.  The `%>%` operator, often referred to as the pipe operator, is used to pass the `sp500` tibble to the subsequent operation in a more readable and concise manner.

3.  The `rename_with()` function from the `dplyr` package is applied to the `sp500` tibble. This function allows us to rename columns based on a specified function or formula.

4.  In this case, a formula `~ new_names` is used as the first argument of `rename_with()`. This formula indicates that the new names for the columns should be sourced from the `new_names` vector.

5.  The second argument, `everything()`, specifies that the renaming should be applied to all columns in the `sp500` tibble.

6.  Finally, the resulting tibble with the renamed columns is assigned back to the `sp500` variable, effectively updating the tibble with the new column names.

In essence, the code uses the `new_names` vector as a mapping to assign new column names to the `sp500` tibble, ensuring that each column is given the desired new name specified in `new_names`.




### 4) Review the data again after renaming columns

We will review the column names again after the renaming.
For this purpose, we run the `colnames()` function can help.


```{r, warning=FALSE}
colnames(sp500)
```




### 5. Understand the Data Columns indepth

The data has 36 columns.
We need to understand what they mean. 
We will reorganize the column names and gain a deeper understanding of what they mean.

The following table lists all the data columns.

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
library(tibble)

new_names <- c(
  "Date", "Stock", "StockName", "Sector", "Industry", 
  "MarketCap", "Price", "Low52Wk", "High52Wk", 
  "ROE", "ROA", "ROIC", "GrossMargin", 
  "OperatingMargin", "NetMargin", "PE", 
  "PB", "EVEBITDA", "EBITDA", "EPS", 
  "EBITDA_YOY", "EBITDA_QYOY", "EPS_YOY", 
  "EPS_QYOY", "PFCF", "FCF", 
  "FCF_QYOY", "DebtToEquity", "CurrentRatio", 
  "QuickRatio", "DividendYield", 
  "DividendsPerShare_YOY", "PS", 
  "Revenue_YOY", "Revenue_QYOY", "TechRating"
)

descriptions <- c(
  "Date (e.g. \"7/15/2023\")",
  "Stock Ticker (e.g. AAL)",
  "Name of the company (e.g \"American Airlines Group, Inc.\")",
  "Sector the stock belongs to (e.g. \"Transportation\")",
  "Industry the stock belongs to (e.g \"Airlines\")",
  "Market capitalization of the company",
  "Recent Stock Price",
  "52-Week Low Price",
  "52-Week High Price",
  "Return on Equity",
  "Return on Assets",
  "Return on Invested Capital",
  "Gross Profit Margin",
  "Operating Profit Margin",
  "Net Profit Margin",
  "Price-to-Earnings Ratio",
  "Price-to-Book Ratio",
  "Enterprise Value to EBITDA Ratio",
  "EBITDA",
  "Earnings per Share",
  "EBITDA Year-over-Year Growth",
  "EBITDA Quarterly Year-over-Year Growth",
  "EPS Year-over-Year Growth",
  "EPS Quarterly Year-over-Year Growth",
  "Price-to-Free Cash Flow",
  "Free Cash Flow",
  "Free Cash Flow Quarterly Year-over-Year Growth",
  "Debt-to-Equity Ratio",
  "Current Ratio",
  "Quick Ratio",
  "Dividend Yield",
  "Annual Dividends per Share Year-over-Year Growth",
  "Price-to-Sales Ratio",
  "Revenue Year-over-Year Growth",
  "Revenue Quarterly Year-over-Year Growth",
  "Technical Rating"
)

column_info <- tibble(ColumnName = new_names, Description = descriptions)
```


```{r, warning=FALSE, eval=TRUE, echo=FALSE}

#suppressPackageStartupMessages(library(kableExtra))

#column_table <- knitr::kable(column_info, "html")  %>% 
#  kable_styling() 
# %>%
# add_header_above(c("Table 1: Desription of Column Names" = ncol(column_info)))

#column_table
```


```{r, warning=FALSE, eval=TRUE, echo=FALSE}
# Create different Tables explaining different columns in the data
library(dplyr)
stockCols = slice(column_info, c(1:7))
taCols = slice(column_info, c(8,9,36))
profitabilityCols = slice(column_info, c(10:15))
earningsCols = slice(column_info, c(16:24))
fcfCols = slice(column_info, c(25:27))
liquidityCols = slice(column_info, c(28:30))
dividendCols = slice(column_info, c(31:32))
revenueCols = slice(column_info, c(33:35))
```


```{r, warning=FALSE, eval=TRUE, echo=FALSE}
# DEBUG
#print(fcfCols)
```


```{r, warning=FALSE, eval=TRUE, echo=FALSE}

suppressPackageStartupMessages(library(kableExtra))
table1a <- knitr::kable(stockCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1a: Basic Information" = ncol(column_info)))
table1b <- knitr::kable(taCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1b: Price and Technical Analysis" = ncol(column_info)))
table1c <- knitr::kable(profitabilityCols, "html") %>% kable_styling() %>% add_header_above(c("Table 1c: Profitability" = ncol(column_info)))
table1d <- knitr::kable(earningsCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1d: Earnings" = ncol(column_info)))
table1e <- knitr::kable(fcfCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1e: Free Cash Flow" = ncol(column_info)))
table1f <- knitr::kable(liquidityCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1f: Liquidiy" = ncol(column_info)))
table1g <- knitr::kable(dividendCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1g: Dividend" = ncol(column_info)))
table1h <- knitr::kable(revenueCols, "html")  %>% kable_styling() %>% add_header_above(c("Table 1h: Revenue" = ncol(column_info)))
```


The column names described in Table 1a concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1a 
```


The column names described in Table 1b concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1b
```


The column names described in Table 1c concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1c
```


The column names described in Table 1d concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1d
```


The column names described in Table 1e concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1e
```


The column names described in Table 1f concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1f
```


The column names described in Table 1g concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1g
```




The column names described in Table 1h concern basic information about each stock. 

```{r, warning=FALSE, eval=TRUE, echo=FALSE}
table1h
```




>This is the end of the data column discussion.

