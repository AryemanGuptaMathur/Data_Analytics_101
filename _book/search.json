[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis 101 – Data Wrangling and Visualization using R.",
    "section": "",
    "text": "Preface\nThis book is about:::\n\nR programming.\nRStudio."
  },
  {
    "objectID": "01OverviewOfR.html#overview-of-r-programming",
    "href": "01OverviewOfR.html#overview-of-r-programming",
    "title": "1  Overview and Getting Started",
    "section": "1.1 Overview of R programming?",
    "text": "1.1 Overview of R programming?\n\nR is a programming language and open-source software environment for statistical computing, data analysis, and visualization. It was created by Ross Ihaka and Robert Gentleman at the University of Auckland in New Zealand in the early 1990s.\nR offers an extensive array of statistical and graphical techniques, such as linear and nonlinear modeling, classical statistical tests, time-series analysis, and clustering, among others. In addition, it supports data manipulation, data import/export, and multiple data formats.\nIt is frequently employed in the creation of statistical software, data analysis, and data science.\nR is an open-source project, and the GNU General Public License makes its source code accessible. The S programming language was created at Bell Labs in the 1970s by John Chambers and others. R is an implementation of S.\nThe Comprehensive R Archive Network (CRAN) provides a significant number of downloadable packages for the extensible programming language R. These products include tools for machine learning, data mining, and visualization.\nR is a prominent tool for data analysts, data scientists, statisticians, and researchers in academia, industry, and government. It has a large and active user community that contributes to the maintenance and development of R packages. [1]"
  },
  {
    "objectID": "01OverviewOfR.html#benefits-of-r",
    "href": "01OverviewOfR.html#benefits-of-r",
    "title": "1  Overview and Getting Started",
    "section": "1.2 Benefits of R",
    "text": "1.2 Benefits of R\nNumerous advantages are associated with mastering R programming:\n\nAs an open-source programming language, R is free to use, distribute, and modify. This makes it accessible to anyone, regardless of budget or resources, who desires to learn and use it.\nR has a large and active community of users and developers who contribute to its maintenance and development. This community provides an abundance of resources, such as documentation, forums, and packages, making it simpler for users to learn and effectively use R.\nR was designed particularly for statistical computing and has a vast array of statistical functions and models built in. In addition, the thousands of available packages on CRAN provide additional statistical tools and methodologies.\nR’s robust and adaptable graphics system enables users to create high-quality data visualizations for data exploration, analysis, and communication.\nReproducibility: R enables users to write scripts that are readily shareable and reproducible, which increases transparency and facilitates collaboration on data analysis projects.\nR is readily compatible with other programming languages, such as Python and SQL, as well as data storage and manipulation tools, such as Hadoop and Spark. [2]"
  },
  {
    "objectID": "01OverviewOfR.html#key-features-of-r",
    "href": "01OverviewOfR.html#key-features-of-r",
    "title": "1  Overview and Getting Started",
    "section": "1.3 Key Features of R",
    "text": "1.3 Key Features of R\nAmong the main characteristics of R programming are:\n\nR is an object-oriented programming language, allowing users to construct and manipulate complex data structures and objects.\nR also supports functional programming, allowing users to construct functions as first-class objects and use higher-order functions to create more complex algorithms.\nExtensibility: R has a large number of packages available for distribution from the Comprehensive R Archive Network (CRAN). These products include tools for machine learning, data mining, and visualization.\nGraphics and visualization: R’s robust and adaptable graphics system enables users to generate high-quality visualizations for data exploration, analysis, and communication.\nData manipulation: R offers a vast array of data manipulation tools, including subsetting, merging, reshaping, and aggregating data.\nR was designed particularly for statistical computing and has a vast array of built-in statistical functions and models, such as linear and nonlinear modeling, classical statistical tests, time-series analysis, and clustering, among others.\nR offers a robust interactive environment, with support for data input/output, data exploration, and data visualization. [3]"
  },
  {
    "objectID": "01OverviewOfR.html#running-r-locally",
    "href": "01OverviewOfR.html#running-r-locally",
    "title": "1  Overview and Getting Started",
    "section": "1.4 Running R locally",
    "text": "1.4 Running R locally\nFollow these general instructions to run R locally on your computer:\n\nInstall and download R\nSelect an IDE: To write and execute R code, you can use a text editor or a dedicated integrated development environment (IDE). Popular alternatives include RStudio, Emacs, and Vim. RStudio is a free and open-source integrated development environment (IDE) designed specifically for R that is extensively utilized by the R community.\nOpen your preferred IDE or text editor, and then initiate a new R session. This can be accomplished by typing R at the command prompt or launching a new R script file.\nUse your preferred IDE or text editor to write and execute R code. You can execute your code by choosing the “Run” button or by pressing Ctrl+Enter (Windows) or Cmd+Enter (Mac) at the end of each line.\nProtect your work: Save your R code to a file for reference and reuse in the future. Your plots and outputs can also be saved to files for use in reports and presentations. [4]\n\n\n1.4.1 Installing R locally\nFollow these general instructions to install R locally on your computer:\n\nGo to the website of the R project: In your web browser, go to the R project website (https://www.r-project.org/).\nSelect an operating system: On the download page, choose the version of R compatible with your operating system (Windows, Mac, or Linux).\nSelect a mirror to obtain R from after clicking the download link for your operating system.\nInstall R: Double-click the downloaded file once the download is complete to begin the installation procedure. Install R on your computer by following the instructions. [5]\n\n\n\n1.4.2 RStudio\nRStudio is a specialized integrated development environment (IDE) for R programming. It provides an intuitive interface and a suite of tools for R-based data analysis, visualization, and modeling.\nAmong the features of RStudio are the following:\n\nRStudio has a code editor with syntax highlighting, code completion, and other features that make writing R code simpler.\nRStudio offers a data viewer that enables users to observe and investigate their data in a tabular format.\nThe plots pane in RStudio depicts the graphical outputs generated by R code.\nConsole pane: The console pane in RStudio displays R code and its output and enables users to execute R commands in an interactive environment.\nRStudio provides tools for managing R packages, including the installation, update, and removal of packages.\nVersion control: RStudio integrates with version control systems like Git, enabling users to manage and collaborate on their code.\nShiny applications: RStudio allows users to create interactive web applications using the Shiny web development utility for R. [6]\n\nTo install RStudio locally on your computer, you can follow these general steps:\n\nDownload R: Before you can install RStudio, you will need to download and install R. You can download the appropriate version of R for your operating system from the R project website (https://www.r-project.org/).\nDownload RStudio: Go to the RStudio download page (https://www.rstudio.com/products/rstudio/download/) and select the appropriate version of RStudio for your operating system.\nInstall RStudio: Once the RStudio installer has downloaded, run the installer and follow the instructions to install RStudio on your computer.\nOpen RStudio: Once the installation is complete, open RStudio by double-clicking the RStudio icon on your desktop or in your Applications folder.\nStart an R session: In RStudio, click on the Console tab to start an R session. You can then type R commands in the console and run them using the “Run” button or by pressing Ctrl+Enter (Windows) or Cmd+Enter (Mac). [7]"
  },
  {
    "objectID": "01OverviewOfR.html#running-r-in-the-cloud",
    "href": "01OverviewOfR.html#running-r-in-the-cloud",
    "title": "1  Overview and Getting Started",
    "section": "1.5 Running R in the Cloud",
    "text": "1.5 Running R in the Cloud\n\nRunning R in the cloud enables users to access R and RStudio from any location with an internet connection, without deploying R locally.\nNumerous cloud service providers offer virtual machines (VMs) with pre-installed R and RStudio. Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) are popular options.\n\nDepending on the user’s use case and requirements, running R in the cloud provides a variety of advantages and disadvantages. Here are some general advantages and disadvantages of cloud-based R:\nBenefits:\n\nScalability: Cloud service providers provide scalable computing resources that can be adjusted to satisfy the requirements of a specific workload. This can be especially beneficial for data-intensive tasks that demand a great deal of computing power.\nRunning R in the cloud enables users to access R and RStudio from any location with an internet connection, making it simple to collaborate on projects and share data.\nCloud providers offer flexible pricing models that may be more cost-effective than running R on local hardware, especially for short-term or infrequent use cases.\nSecurity: Cloud service providers offer a variety of security features, including firewalls and encryption, to safeguard data and applications from unauthorized access or attacks. [8]\n\nDrawbacks:\n\nRunning R in the cloud requires a stable internet connection, which may not be accessible at all times or in all locations. This can hinder the ability to work on initiatives involving data analysis and modeling.\nRunning R in the cloud necessitates familiarity with cloud computing platforms and tools, which can necessitate a steep learning curve for users new to cloud computing.\nData privacy: Storing data in the cloud may raise concerns about data privacy, particularly for sensitive or confidential data. Cloud service providers offer security features, but users must be aware of the risks and secure their data accordingly.\nAlthough cloud computing can be cost-effective in certain circumstances, it can also be costly for long-term or high-volume use cases, especially if data storage or other resources are required in addition to computing capacity. [8]\n\n\n1.5.1 Cloud Service Providers – Posit, AWS, Azure, GCP\nPosit is a comparatively new cloud service provider that offers high-performance computing resources for data-intensive applications. AWS, Azure, and GCP are three of the most prominent cloud service providers, each of which offers a variety of services and features for running cloud-based applications. Here is a comparison of the four service providers:\nPosit:\n\nProvides computing resources with high efficacy for data-intensive applications\nProvides bare-metal instances for superior performance and adaptability\nDedicated to data security and compliance\nOffers hardware configurations tailored to specific duties.\n\nAWS:\n\nProvides a variety of cloud computing services, such as computing, storage, and database services\nA large and active user community with an abundance of resources and assistance.\nIncludes pay-as-you-go and reserved instance pricing options.\nOffers a variety of tools and services for administering and securing cloud-based applications\n\nAzure:\n\nProvides a variety of cloud computing services, such as computing, storage, and networking Integrates tightly with Microsoft’s enterprise software and services.\nProvides flexible pricing models, including pay-as-you-go, reserved instance, and spot instance pricing\nProvides a variety of tools and services for managing and securing cloud-based applications\n\nGCP:\n\nProvides a variety of cloud computing services, such as computing, storage, and networking\nIncludes a variety of tools and services for machine learning and artificial intelligence.\nOffers flexible pricing models, including pay-as-you-go and sustained use pricing\nProvides a variety of tools and services for managing and securing cloud-based applications. [9]\n\n\n\n1.5.2 General Instructions for operating R in the cloud\n\nChoose a cloud service provider.\nOnce you have selected a cloud service provider, you can construct a virtual machine with R and RStudio already installed. The precise steps for creating a virtual machine will differ depending on the provider you select, but the majority of providers offer an intuitive interface for creating and configuring virtual machines.\nOnce the virtual machine is operational, you can connect to it using a web browser or remote desktop software. This should be accompanied by instructions from the provider.\nStart a R session: Once you are connected to the virtual machine, you can use RStudio or the R console to launch a R session.\nYou can transfer your data to the virtual machine and then access it through RStudio or the R console. You can also connect to external data sources with R programs like DBI and odbc. [9]"
  },
  {
    "objectID": "01OverviewOfR.html#references",
    "href": "01OverviewOfR.html#references",
    "title": "1  Overview and Getting Started",
    "section": "1.6 References",
    "text": "1.6 References\n[1]\nIhaka, R., & Gentleman, R. (1996). R: A language for data analysis and graphics. Journal of Computational and Graphical Statistics, 5(3), 299-314. https://www.jstor.org/stable/1390807\n[2]\nPeng, R. D. (2016). R programming for data science. O’Reilly Media.\nVenables, W. N., Smith, D. M., & R Development Core Team. (2019). An introduction to R. Network Theory Ltd. Retrieved from https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer-Verlag.\nGandrud, C. (2015). Reproducible research with R and RStudio. CRC Press.\nGrolemund, G., & Wickham, H. (2017). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media.\n[3]\nChambers, J. M. (2016). Extending R (2nd ed.). CRC Press.\nWickham, H., & Grolemund, G. (2017). R packages: Organize, test, document, and share your code. O’Reilly Media.\nMurrell, P. (2006). R graphics. CRC Press.\nWickham, H. (2014). Tidy data. Journal of Statistical Software, 59(10), 1-23.\nVenables, W. N., Smith, D. M., & R Development Core Team. (2019). An introduction to R. Network Theory Ltd. Retrieved from https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\nR Core Team (2020). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. https://www.R-project.org/\n[4]\nThe R Project for Statistical Computing. (2021). Download R for (Mac) OS X. https://cran.r-project.org/bin/macosx/\nRStudio. (2021). RStudio. https://www.rstudio.com/\nR Core Team (2020). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. https://www.R-project.org/\nPeng, R. D. (2016). R programming for data science. O’Reilly Media.\nGandrud, C. (2015). Reproducible research with R and RStudio. CRC Press.\n[5]\nThe R Project for Statistical Computing. (2021). Download R for (Mac) OS X. https://cran.r-project.org/bin/macosx/\nThe R Project for Statistical Computing. (2021). Download R for Windows. https://cran.r-project.org/bin/windows/base/\nThe R Project for Statistical Computing. (2021). Download R for Linux. https://cran.r-project.org/bin/linux/\nRStudio. (2021). RStudio. https://www.rstudio.com/products/rstudio/download/\nPeng, R. D. (2016). R programming for data science. O’Reilly Media.\n[6]\nRStudio. (2021). RStudio. https://www.rstudio.com/products/rstudio/features/\nPeng, R. D. (2016). R programming for data science. O’Reilly Media.\nWickham, H. (2014). Tidy data. Journal of Statistical Software, 59(10), 1-23.\nWickham, H., & Grolemund, G. (2017). R packages: Organize, test, document, and share your code. O’Reilly Media.\nChang, W., & Cheng, J. (2020). R Markdown: The definitive guide. CRC Press.\nChang, W., Cheng, J., Allaire, J. J., Xie, Y., & McPherson, J. (2021). shiny: Web application framework for R. R package version 1.6.0. https://CRAN.R-project.org/package=shiny\n[7]\nThe R Project for Statistical Computing. (2021). Download R for (Mac) OS X. https://cran.r-project.org/bin/macosx/\nThe R Project for Statistical Computing. (2021). Download R for Windows. https://cran.r-project.org/bin/windows/base/\nThe R Project for Statistical Computing. (2021). Download R for Linux. https://cran.r-project.org/bin/linux/\nRStudio. (2021). RStudio. https://www.rstudio.com/products/rstudio/download/\nPeng, R. D. (2016). R programming for data science. O’Reilly Media.\n[8]\nBiecek, P., & Kosinski, M. (2018). Mastering Software Development in R. Packt Publishing.\nAmazon Web Services. (2021). AWS. https://aws.amazon.com/\nMicrosoft Azure. (2021). Azure. https://azure.microsoft.com/\nGoogle Cloud Platform. (2021). GCP. https://cloud.google.com/\nRStudio. (2021). RStudio Server Pro. https://rstudio.com/products/rstudio-server-pro/\nAmazon Web Services. (2021). EC2 User Guide for Linux Instances. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html\nMicrosoft Azure. (2021). Create a Windows virtual machine with the Azure portal. https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal\nGoogle Cloud Platform. (2021). Compute Engine Documentation. https://cloud.google.com/compute/docs\nAmazon Web Services. (2021). Running RStudio Server Pro using Amazon EC2. https://docs.rstudio.com/rsp/quickstart/aws/\n[9]\nPosit. (2021). High-Performance Computing Services. https://posit.cloud/\nAmazon Web Services. (2021). AWS. https://aws.amazon.com/\nMicrosoft Azure. (2021). Azure. https://azure.microsoft.com/\nGoogle Cloud Platform. (2021). GCP. https://cloud.google.com/\nArmbrust, M., Fox, A., Griffith, R., Joseph, A. D., Katz, R., Konwinski, A., … Zaharia, M. (2010). A view of cloud computing. Communications of the ACM, 53(4), 50–58. https://doi.org/10.1145/1721654.1721672\nXiao, Z., Chen, Z., & Zhang, J. (2014). Cloud computing research and security issues. Journal of Network and Computer Applications, 41, 1–11. https://doi.org/10.1016/j.jnca.2013.11.004\nCloud Spectator. (2021). Cloud Service Provider Pricing Models: A Comprehensive Guide. https://www.cloudspectator.com/cloud-service-provider-pricing-models-a-comprehensive-guide/"
  },
  {
    "objectID": "02RPackages.html#benefits-of-r-packages",
    "href": "02RPackages.html#benefits-of-r-packages",
    "title": "2  R Packages",
    "section": "2.1 Benefits of R Packages",
    "text": "2.1 Benefits of R Packages\nThere are numerous advantages to using R packages:\n\nReusability: R packages enable users to write code that is readily reusable across applications. Once a package has been created and published, others can install and use it, sparing them time and effort in coding.\nCollaboration: Individuals or teams can develop packages collaboratively, enabling the sharing of code, data, and ideas. This promotes collaboration within the R community and the creation of new tools and techniques.\nStandardization: Packages help standardize the code and methodology used for particular duties, making it simpler for users to comprehend and replicate the work of others. This decreases the possibility of errors and improves the dependability of results.\nScalability: Packages can manage large data sets and sophisticated analyses, enabling users to scale up their work to larger, more complex problems.\nAccessibility: R packages are freely available and can be installed on a variety of operating systems, making them accessible to a broad spectrum of users. [1]"
  },
  {
    "objectID": "02RPackages.html#comprehensive-r-archive-network-cran",
    "href": "02RPackages.html#comprehensive-r-archive-network-cran",
    "title": "2  R Packages",
    "section": "2.2 Comprehensive R Archive Network (CRAN)",
    "text": "2.2 Comprehensive R Archive Network (CRAN)\n\nThe Comprehensive R Archive Network (CRAN) is a global server network that maintains and distributes R packages, which are collections of code, data, and documentation that extend R’s functionality.\nCRAN provides a centralized and organized repository for R packages, making it simple for users to locate, acquire, and install the necessary packages.\nCRAN hosts thousands of packages, which can be downloaded and installed using the install.packages() function in R. The packages are organized into categories such as graphics, statistics, and machine learning, making it easy to find packages that are relevant to your needs.\nThe R Development Core Team maintains CRAN, which is readily accessible to anyone with an internet connection. [2]"
  },
  {
    "objectID": "02RPackages.html#installing-a-r-package",
    "href": "02RPackages.html#installing-a-r-package",
    "title": "2  R Packages",
    "section": "2.3 Installing a R Package",
    "text": "2.3 Installing a R Package\n\nThe install.packages() function can be used to deploy a R package.\nFor example, in order to install the ggplot2 package, for instance, you would execute the following code in R:\n\n\ninstall.packages(\"ggplot2\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.3'\n(as 'lib' is unspecified)\n\n\n\nThis will obtain and install on your system the ggplot2 package and its dependencies.\nNote that a package only needs to be installed once on your system. After installation, you can import the package using the library() function in your R session.\nTo import the ggplot2 package, for instance, you would execute the following code in R:\n\n\nlibrary(ggplot2)\n\n\nThis will make the ggplot2 package’s functions and data sets available for use within your R session.\n\n\n2.3.1 Popular R Packages\nThere are many popular R packages, covering a wide range of topics and domains, such as the following examples:\n\nggplot2: A package for data visualization that provides a flexible system for creating high-quality graphics.\ndplyr: A package for data manipulation that provides a set of functions for filtering, summarizing, and transforming data.\ntidyr: A package for data manipulation that provides functions for reshaping data from wide to long and vice versa.\ntidyverse: A collection of packages for data manipulation, visualization, and modeling that includes dplyr, ggplot2, and tidyr.\ndata.table: A package for data manipulation that provides a fast and efficient way to work with large data sets.\nstringi: A package for working with strings that provides a wide range of string manipulation functions optimized for performance.\nstringr: A package for working with strings, which are common data types in text processing and natural language processing.\nshiny: A package for creating interactive web applications and dashboards.\nRODBC: A package for connecting R to databases using the Open Database Connectivity (ODBC) standard.\nggmap: A package for creating maps and visualizing spatial data using ggplot2.\nrmarkdown: A package for creating dynamic documents that combine text, code, and results in a single document.\nknitr: A package for dynamic report generation, which allows users to create reports that automatically update as data or code changes.\nMASS: A package for multivariate analysis and statistical modeling, which includes functions for fitting linear and nonlinear regression models, principal components analysis..\nlme4: A package for fitting mixed-effects models, which are useful for modeling hierarchical data structures.\ncaret: A package for machine learning that provides tools for data preprocessing, model training, and model evaluation.\nforecast: A package for time series forecasting that includes functions for modeling, visualization, and evaluation of time series data. [2]\n\n\n\n2.3.2 Getting help\nThere are several ways to get help with an R package:\n\nConsult the documentation: The documentation included with the majority of R packages describes the functions and data sets provided by the package and provides usage examples. Using the help() function or typing ?package name&gt; in the R console provides access to a package’s documentation.\nUtilize the integrated support system: R’s integrated help system provides documentation and demonstrations for R functions and packages. In the R console, you can access the help system by typing help(topic) or ?topic, where “topic” is the name of the function or package you require assistance with.\nOnline: There are many online resources available for assistance with R packages, including blogs, forums, and question-and-answer sites such as Stack Overflow. These resources are useful for locating solutions to specific problems and obtaining general guidance on how to use a package."
  },
  {
    "objectID": "02RPackages.html#references",
    "href": "02RPackages.html#references",
    "title": "2  R Packages",
    "section": "2.4 References",
    "text": "2.4 References\n[1]\nWickham, H., & Bryan, J. (2018). R packages: Organize, test, document, and share your code. O’Reilly Media.\nR Core Team (2020). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. https://www.R-project.org/\n[2]\nThe R Project for Statistical Computing. (2021). The Comprehensive R Archive Network (CRAN). https://cran.r-project.org/"
  },
  {
    "objectID": "03InbuiltRFunctions.html#mathematical-operations",
    "href": "03InbuiltRFunctions.html#mathematical-operations",
    "title": "3  Inbuilt R functions",
    "section": "3.1 Mathematical Operations",
    "text": "3.1 Mathematical Operations\nR is a powerful programming language for performing mathematical operations and statistical calculations. Here are some common mathematical operations in R:\n\nArithmetic Operations: R can perform basic arithmetic operations such as addition (+), subtraction (-), multiplication (*), and division (/).\n\n\n# Addition and Subtraction\n5+9-3\n\n[1] 11\n\n# Multiplication and Division\n(5 + 3) * 7 /2\n\n[1] 28\n\n\n\nExponentiation and Logarithms: R can raise a number to a power using the ^ or ** operator or take logarithms.\n\n\n# exponentiation\n2^6\n\n[1] 64\n\n# Exponential of x=2 i.e. e^2\nexp(2) \n\n[1] 7.389056\n\n# logarithms base 2 and base 10\nlog2(64) + log10(100)\n\n[1] 8\n\n\n\nOther mathematical functions: R has many additional useful mathematical functions.\n\n\nWe can find the absolute value, square roots, remainder on division.\n\n\n# absolute value of x=-5\nabs(-9) \n\n[1] 9\n\n# square root of x=70\nsqrt(70)\n\n[1] 8.3666\n\n# remainder of the division of 11/3\n11 %% 3\n\n[1] 2\n\n\n\nWe can round numbers, find their floor, ceiling or up to a number of significant digits\n\n\n# Value of pi to 10 decimal places\npi = 3.1415926536\n\n# round(): This function rounds a number to the given number of decimal places\n# For example, round(pi, 3) returns 3.142\nround(pi,3)\n\n[1] 3.142\n\n# ceiling(): This function rounds a number up to the nearest integer. \n# For example, ceiling(pi) returns 4\nceiling(pi) \n\n[1] 4\n\n# floor(): This function rounds a number down to the nearest integer. \n# For example, floor(pi) returns 3.\nfloor(pi)\n\n[1] 3\n\n# signif(): This function rounds a number to a specified number of significant digits. \n# For example, signif(pi, 3) returns 3.14.\nsignif(pi,3)\n\n[1] 3.14\n\n\n\nStatistical calculations: R has many built-in functions for statistical calculations, such as mean, median, standard deviation, and correlation.\n\n\nx &lt;- c(0, 1, 1, 2, 3, 5, 8)   # create a vector of 7 Fibonacci numbers\nlength(x) # count how many numbers do we have\n\n[1] 7\n\nmean(x)   # calculate the mean\n\n[1] 2.857143\n\nmedian(x) # calculate the median\n\n[1] 2\n\nsd(x)     # calculate the standard deviation\n\n[1] 2.794553\n\ny &lt;- c(1, 2, 3, 4, 5, 6, 7) # create a new vector of positive integers\ncor(x,y)  # calculate the correlation between x and y\n\n[1] 0.938668"
  },
  {
    "objectID": "03InbuiltRFunctions.html#assigning-values-to-variables",
    "href": "03InbuiltRFunctions.html#assigning-values-to-variables",
    "title": "3  Inbuilt R functions",
    "section": "3.2 Assigning values to variables",
    "text": "3.2 Assigning values to variables\n\nA variable can be used to store a value. For example, the R code below will store the sales in a variable, say “sales”:\n\n\n# use the assignment operator &lt;-\nsales &lt;- 9\n# alternately, use =\nsales = 9\n\n\nIt is possible to use &lt;- or = for variable assignments.\nR is case-sensitive. This means that Sales is different from sales\nIt is possible to perform some operations with it.\n\n\n# multiply sales by 2\n2 * sales\n\n[1] 18\n\n\n\nWe can change the value stored in a variable\n\n\n# change the value\nsales &lt;- 15\n# display the revised sales\nsales\n\n[1] 15\n\n\n\nThe following R code creates two variables holding the sales and the price of a product and we can use them to compute the revenue.\n\n\n# sales\nsales &lt;- 5\n\n# price\nprice &lt;- 7\n\n# Calculate the revenue\nrevenue &lt;- price*sales\nrevenue\n\n[1] 35"
  },
  {
    "objectID": "04DataStructures.html#popular-data-structures",
    "href": "04DataStructures.html#popular-data-structures",
    "title": "4  Data Structures",
    "section": "4.1 Popular Data Structures",
    "text": "4.1 Popular Data Structures\nThe R programming language includes a number of data structures that are frequently employed in data analysis and statistical modeling. These are some of the most popular data structures in R:\n\nVector: A vector is a one-dimensional array that stores identical data types, such as numeric, character, or logical. The “c()” function can be used to create vectors, and indexing can be used to access individual vector elements.\nFactor: A factor is a vector representing categorical data, with each distinct value or category represented as a level. Using indexing, individual levels of a factor can be accessed using the “factor()” function.\nDataframe: Similar to a spreadsheet, a data frame is a two-dimensional table-like structure that can store various types of data in columns. The “data.frame()” function can be used to construct data frames, and individual elements can be accessed using row and column indexing.\nMatrix: A matrix is a two-dimensional array of data with identical rows and columns. The “matrix()” function can be used to construct matrices, and individual elements can be accessed using row and column indexing.\nArray: An array is a multidimensional data structure that can contain data of the same data type in user-specified dimensions. Arrays can be constructed using the “array()” function, and elements can be accessed using multiple indexing.\nList: A list is an object that may comprise elements of various data types, including vectors, matrices, data frames, and even other lists. The “list()” function can be used to construct lists, while indexing can be used to access individual elements.\n\nThese data structures are helpful for storing and manipulating data in R, and they can be utilized in numerous applications, such as statistical analysis and data visualization.\nWe will focus our attention on Vectors, Factors and Dataframes, since we believe that these are the three most useful data structures. [1]"
  },
  {
    "objectID": "04DataStructures.html#vectors",
    "href": "04DataStructures.html#vectors",
    "title": "4  Data Structures",
    "section": "4.2 Vectors",
    "text": "4.2 Vectors\n\nA vector is a fundamental data structure in R that can hold a sequence of values of the same data type, such as integers, numeric, character, or logical values.\nA vector can be created using the c() function.\nR supports two forms of vectors: atomic vectors and lists. Atomic vectors are limited to containing elements of a single data type, such as numeric or character. Lists, on the other hand, can contain elements of various data types and structures. [1]\n\n\n4.2.1 Vectors in R\n\nThe following R code creates a numeric vector, a character vector and a logical vector respectively.\n\n\n# Read data into vectors\nnames &lt;- c(\"Ashok\", \"Bullu\", \"Charu\", \"Divya\")\nages &lt;- c(72, 49, 46, 42)\nfemales &lt;- c(FALSE, TRUE, TRUE, TRUE)\n\n\nThe c() function is employed to combine the four character elements into a single vector.\nCommas separate the elements of the vector within the parentheses.\nIndividual elements of the vector can be accessed via indexing, which utilizes square brackets []. For instance, names[1] returns “Ashok”, while names[3] returns “Charu”.\nWe can also perform operations such as categorizing and filtering on the entire vector. For instance, sort(names) returns a vector of sorted names, whereas names[names!= “Bullu”] returns a vector of names excluding “Bullu.”\n\n\n\n4.2.2 Vector Operations\nVectors can be used to perform the following vector operations:\n\nAccessing Elements: We can use indexing with square brackets to access individual elements of a vector. To access the second element of the “names” vector, for instance, we can use:\n\n\nnames[2]\n\n[1] \"Bullu\"\n\n\nThis returns “Bullu”, the second element of the “names” vector.\n\nConcatenation: The “c()” function can be used to combine multiple vectors into a single vector. For instance, to combine the “names” and “ages” vectors into the “people” vector, we can use:\n\n\npersons &lt;- c(names, ages)\npersons\n\n[1] \"Ashok\" \"Bullu\" \"Charu\" \"Divya\" \"72\"    \"49\"    \"46\"    \"42\"   \n\n\nThis generates an eight-element vector containing the names and ages of the four people.\n\nSubsetting: We can use indexing with a logical condition to construct a new vector that contains a subset of elements from an existing vector. For instance, to construct a new vector named “female_names” containing only the females’ names, we can use:\n\n\nfemale_names &lt;- names[females == TRUE]\nfemale_names\n\n[1] \"Bullu\" \"Charu\" \"Divya\"\n\n\nThis generates a new vector comprising three elements containing the names of the three females (“Bullu”, “Charu”, and “Divya”).\n\nArithmetic Operations: We can perform element-wise arithmetic operations on vectors. To calculate the sum of the “ages” vector, for instance, we can use:\n\n\nsum(ages)\n\n[1] 209\n\n\nThis returns 209, the sum of the four ages.\n\nLogical Operations: We can perform logical operations on vectors, which are also executed element-by-element. To create a new vector titled “middle_age” that indicates whether each individual is 45 to 55 years old, for instance, we can use:\n\n\nmiddle_age &lt;- (ages &gt;= 45) & (ages &lt;= 55)\nmiddle_age\n\n[1] FALSE  TRUE  TRUE FALSE\n\n\nThis generates a new vector with four elements containing logical values indicating whether each person is between 45 and 55 years of age.\nTo test whether any of the elements in the “ages” vector are greater than 50, we can use:\n\nany(ages &gt; 50)\n\n[1] TRUE\n\n\n\nUnique Values: We can find the unique values in a vector using the “unique()” function. For example, to find the unique values in the “ages” vector, we can use:\n\n\nunique(ages)\n\n[1] 72 49 46 42\n\n\n\nSorting: We can sort a vector in ascending or descending order using the “sort()” function. For example, to sort the “ages” vector in descending order, we can use:\n\n\nsort(ages, decreasing = TRUE)\n\n[1] 72 49 46 42\n\n\n\n\n4.2.3 Statistical Operations on Vectors\n\nLength: The length represents the count of the number of elements in a vector.\n\n\nlength(ages)\n\n[1] 4\n\n\n\nMaximum and Minimum: The maximum and minimum values are the vector’s greatest and smallest values, respectively.\nRange: The range is a measure of the spread that represents the difference between the maximum and minimum values in a vector.\n\n\nmin(ages)\n\n[1] 42\n\nmax(ages)\n\n[1] 72\n\nrange(ages)\n\n[1] 42 72\n\n\n\nMean: The mean is a central tendency measure that represents the average value of a vector’s elements.\nStandard Deviation: The standard deviation is a measure of dispersion that reflects the amount of variation in a vector’s elements.\nVariance: The variance is another measure of the spread. It is square of the Standard Deviation.\n\n\nmean(ages)\n\n[1] 52.25\n\nsd(ages)\n\n[1] 13.47529\n\nvar(ages)\n\n[1] 181.5833\n\n\n\nMedian: The median is a measure of central tendency that represents the middle value of a sorted vector.\n\n\nmedian(ages)\n\n[1] 47.5\n\n\n\nQuantiles: The quantiles are a set of cut-off points that divide a sorted vector into equal-sized groups.\n\n\nquantile(ages)\n\n   0%   25%   50%   75%  100% \n42.00 45.00 47.50 54.75 72.00 \n\n\nThis will return a set of five values, representing the minimum, first quartile, median, third quartile, and maximum of the four ages.\nThus, we note that the R programming language provides a wide range of statistical operations that can be performed on vectors for data analysis and modeling. Vectors are clearly a potent and versatile data structure that can be utilized in a variety of ways.\n\n\n4.2.4 Strings\nHere are some common string operations that can be conducted using the provided vector examples.\n\nSubstring: The substr() function can be used to extract a substring from a character vector. To extract the first three characters of each name in the “names” vector, for instance, we can use:\n\n\nsubstr(names, 1, 3)\n\n[1] \"Ash\" \"Bul\" \"Cha\" \"Div\"\n\n\nThis returns a new character vector containing the initial three letters of each name (“Ash”, “Bul”, “Cha”, and “Div”).\n\nConcatenation: Using the paste() function, we can concatenate two or more character vectors into a singular vector. To create a new vector containing the names and ages of the individuals, for instance, we can use:\n\n\npersons &lt;- paste(names, ages)\npersons\n\n[1] \"Ashok 72\" \"Bullu 49\" \"Charu 46\" \"Divya 42\"\n\n\nThis will generate a new eight-element character vector containing the name and age of each individual, separated by a space.\n\nCase Conversion: The toupper() and tolower() functions can be used to convert the case of characters within a character vector. To convert the “names” vector to uppercase letters, for instance, we can use:\n\n\ntoupper(names)\n\n[1] \"ASHOK\" \"BULLU\" \"CHARU\" \"DIVYA\"\n\n\nThis will generate a new character vector with all of the names converted to uppercase.\n\nPattern Matching: Using the grep() and grepl() functions, we can search for a pattern within the elements of a character vector. To find the names in the “names” vector that contain the letter “a”, for instance, we can use:\n\n\ngrep(\"a\", names)\n\n[1] 3 4\n\n\nThis returns a vector containing the indexes of the “names” vector elements that contain the letter “a.”\n\nRegular Expressions: We can use regular expressions with the grep() and grepl() functions to search for patterns in the elements of a character vector. To find the names in the “names” vector that begin with the letter “C”, for instance, we can use:\n\n\ngrep(\"^C\", names)\n\n[1] 3\n\n\nThis returns a vector containing the indexes of the elements in “names” that begin with the letter “C.” [1]"
  },
  {
    "objectID": "04DataStructures.html#references",
    "href": "04DataStructures.html#references",
    "title": "4  Data Structures",
    "section": "4.3 References",
    "text": "4.3 References\n[1]\nR Core Team. (2021). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing. https://www.R-project.org/\nR Core Team. (2022). Vectors, Lists, and Arrays. R Documentation. https://cran.r-project.org/doc/manuals/r-release/R-intro.html#vectors-lists-and-arrays\nWickham, H., & Grolemund, G. (2016). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media, Inc."
  },
  {
    "objectID": "05ReadingData.html#dataframes",
    "href": "05ReadingData.html#dataframes",
    "title": "5  Reading Data",
    "section": "5.1 Dataframes",
    "text": "5.1 Dataframes\n\nA dataframe is a two-dimensional table-like data structure in R that stores data in rows and columns, with distinct data types for each column.\nSimilar to a spreadsheet or a SQL table, it is one of the most frequently employed data structures in R. Each column in a data.frame is a constant-length vector, and each row represents an observation or case.\nUsing the data.frame() function or by importing data from external sources such as CSV files, Excel spreadsheets, or databases, dataframe objects can be created in R.\ndataframe objects have many useful built-in methods and functions for manipulating and summarizing data, including subsetting, merging, filtering, and aggregation. [1]\n\n\n5.1.1 Creating a dataframe using raw data\n\nThe following code generates a data.frame named df containing three columns - names, ages, and heights, and four rows of data for each individual.\n\n\n# Create input data as vectors\nnames &lt;- c(\"Ashok\", \"Bullu\", \"Charu\", \"Divya\")\nages &lt;- c(72, 49, 46, 42)\nheights &lt;- c(170, 167, 160, 166)\n\n# Combine input data into a data.frame\npeople &lt;- data.frame(Name = names, Age = ages, Height = heights)\n\n# Print the resulting dataframe\nprint(people)\n\n   Name Age Height\n1 Ashok  72    170\n2 Bullu  49    167\n3 Charu  46    160\n4 Divya  42    166"
  },
  {
    "objectID": "05ReadingData.html#reading-inbuilt-datasets-in-r",
    "href": "05ReadingData.html#reading-inbuilt-datasets-in-r",
    "title": "5  Reading Data",
    "section": "5.2 Reading Inbuilt datasets in R",
    "text": "5.2 Reading Inbuilt datasets in R\n\nR contains a number of built-in datasets that can be accessed without downloading or integrating from external sources. Here are some of the most frequently used built-in datasets in R:\n\n\nwomen: This dataset includes the heights and weights of a sample of 15,000 women.\nmtcars: This dataset contains information on 32 distinct automobile models, including the number of cylinders, engine displacement, horsepower, and weight.\ndiamonds: This dataset includes the prices and characteristics of approximately 54,000 diamonds, including carat weight, cut, color, and clarity.\niris: This data set measures the sepal length, sepal width, petal length, and petal breadth of 150 iris flowers from three distinct species.\n\n\n5.2.1 The women dataset\nAs an illustration, consider the women dataset inbuilt in R, which contains information about the heights and weights of women. It has just two variables:\n\nheight: Height of each woman in inches\nweight: Weight of each woman in pounds\nThe data() function is used to import any inbuilt dataset into R. The data(women) command in R loads the women dataset\n\n\ndata(women)\n\n\nThe str() function gives the dimensions and data types and also previews the data.\n\n\nstr(women)\n\n'data.frame':   15 obs. of  2 variables:\n $ height: num  58 59 60 61 62 63 64 65 66 67 ...\n $ weight: num  115 117 120 123 126 129 132 135 139 142 ...\n\n\n\nThe summary() function gives some summary statistics.\n\n\nsummary(women)\n\n     height         weight     \n Min.   :58.0   Min.   :115.0  \n 1st Qu.:61.5   1st Qu.:124.5  \n Median :65.0   Median :135.0  \n Mean   :65.0   Mean   :136.7  \n 3rd Qu.:68.5   3rd Qu.:148.0  \n Max.   :72.0   Max.   :164.0  \n\n\n\n\n5.2.2 The mtcars dataset\nThe mtcars dataset inbuilt in R comprises data on the fuel consumption and other characteristics of 32 different automobile models. Here is a concise description of the 11 mtcars data columns:\n\nmpg: Miles per gallon (fuel efficiency)\ncyl: Number of cylinders\ndisp: Displacement of the engine (in cubic inches)\nhp: gross horsepower\ndrat: Back axle ratio wt: Weight (in thousands of pounds)\nwt: Weight (in thousands of pounds)\nqsec: 1/4 mile speed (in seconds)\nvs: Type of engine (0 = V-shaped, 1 = straight)\nam: Type of transmission (0 for automatic, 1 for manual)\ngear: the number of forward gears\ncarb: the number of carburetors\n\n\ndata(mtcars)\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ..."
  },
  {
    "objectID": "05ReadingData.html#reading-different-file-formats-into-a-dataframe",
    "href": "05ReadingData.html#reading-different-file-formats-into-a-dataframe",
    "title": "5  Reading Data",
    "section": "5.3 Reading different file formats into a dataframe",
    "text": "5.3 Reading different file formats into a dataframe\n\nWe examine how to read data into a dataframe in R when the original data is stored in prominent file formats such as CSV, Excel, and Google Sheets.\nBefore learning how to accomplish this, it is necessary to comprehend how to configure the Working Directory in R.\n\n\n5.3.1 Working Directory\n\nThe working directory is the location where R searches for and saves files by default.\nBy default, when we execute a script or import data into R, R will search the working directory for files.\nUsing R’s getwd() function, we can examine our current working directory:\n\n\ngetwd()\n\n[1] \"/cloud/project\"\n\n\n\nWe are running R in the Cloud and hence we are seeing that the working directory is specified as /cloud/project/DataAnalyticsBook101. If we are doing R programming on a local computer, and if our working directory is the Desktop, then we may see a different response such as C:/Users/YourUserName/Desktop.\nUsing R’s setwd() function, we can change our current working directory. For example, the following code will set our working directory to the Desktop:\n\n\nsetwd(\"C:/Users/YourUserName/Desktop\")\n\n\nWe should choose an easily-remembered and accessible working directory to store our R scripts and data files. Additionally, we should avoid using spaces, special characters, and non-ASCII characters in file paths, as these can cause file handling issues in R. [2]\n\n\n\n5.3.2 Reading a CSV file into a dataframe\n\nCSV is the abbreviation for “Comma-Separated Values.” A CSV file is a plain text file that stores structured tabular data.\nEach entry in a CSV file represents a record, whereas each column represents a field. The elements in each record are separated by commas (hence the name Comma-Separated Values), semicolons, or tabs.\nBefore proceeding ahead, it is imperative that the file that we wish to read is located in the Working Directory.\nSuppose we wish to import a CSV file named mtcars.csv, located in the Working Directory. We can use the read.csv() function, illustrated as follows.\n\n\ndf_csv &lt;- read.csv(\"mtcars.csv\")\n\n\nIn this example, the read.csv() function reads the mtcars.csv file into a data frame named df_csv.\nIf the file is not in the current working directory, the complete file path must be specified in the read.csv() function argument; otherwise, an error will occur.\n\n\n\n5.3.3 Reading an Excel (xlsx) file into a dataframe\n\nSuppose we wish to import a Microsoft Excel file named mtcars.xlsx, located in the Working Directory.\nWe can use the read_excel function in the R package readxl, illustrated as follows.\n\n\nlibrary(readxl)\ndf_xlsx &lt;- read_excel(\"mtcars.xlsx\")\n\n\n\n5.3.4 Reading a Google Sheet into a dataframe\n\nGoogle Sheets is a ubiquitous cloud-based spreadsheet application developed by Google. It is a web-based application that enables collaborative online creation and modification of spreadsheets.\nWe can import data from a Google Sheet into a R dataframe, as follows.\n\n\nConsider a Google Sheet whose preferences have been set such that anyone can view it using its URL. If this is not done, then some authentication would become necessary.\nEvery Google Sheet is characterized by a unique Sheet ID, embedded within the URL. For example, consider a Google Sheet containing some financial data concerning S&P500 index shares.\nSuppose the Sheet ID is: 1nm688a3GsPM5cadJIwu6zj336WBaduglY9TSTUaM9jk\nWe can use the function gsheet2tbl in package gsheet to read the Google Sheet into a dataframe, as demonstrated in the following code.\n\n\n# Read recent S&P500 data that is posted in a Google Sheet.\nlibrary(gsheet)\n\nprefix &lt;- \"https://docs.google.com/spreadsheets/d/\"\nsheetID &lt;- \"1nm688a3GsPM5cadJIwu6zj336WBaduglY9TSTUaM9jk\"\nsuffix &lt;- \"/edit#gid=0\"\n\n# Form the URL to connect to\nurl &lt;- paste(prefix, sheetID, suffix) \n\n# Read the Google Sheet located at the URL into a dataframe called gf\ngf &lt;- gsheet2tbl(url)\n\nNo encoding supplied: defaulting to UTF-8.\n\n\n\nThe first line imports the gsheet package required to access Google Sheets into R.\nThe following three lines define URL variables for Google Sheets. The prefix variable contains the base URL for accessing Google Sheets, the sheetID variable contains the ID of the desired Google Sheet, and the suffix variable contains the URL’s suffix.\nThe paste() function is used to combine the prefix, sheetID, and suffix variables into a complete URL for accessing the Google Sheet.\nThe gsheet2tbl() function from the gsheet package is then used to read the specified Google Sheet into a dataframe called gf.\nOnce the preceding code is executed, the gf dataframe will contain the Google Sheet data, which can then be analyzed further in R.\n\n\n\n5.3.5 Joining or Merging two dataframes\n\nSuppose we have a second S&P 500 data located in a second Google Sheet and suppose that we would like to join or merge the data in this dataframe with the above dataframe gf.\nThe ID of this second sheet is: 1F5KvFATcehrdJuGjYVqppNYC9hEKSww9rXYHCk2g6OA\nWe can read the data present in this Google Sheet using the following code, similar to the one discussed above, using the following code.\n\n\n# Read additional S&P500 data presend in another Google Sheet.\nlibrary(gsheet)\n\nprefix &lt;- \"https://docs.google.com/spreadsheets/d/\"\nsheetID &lt;- \"1F5KvFATcehrdJuGjYVqppNYC9hEKSww9rXYHCk2g6OA\"\nsuffix &lt;- \"/edit#gid=0\"\n\n# Form the URL to connect to\nurl &lt;- paste(prefix, sheetID, suffix) \n\n# Read the Google Sheet located at the URL into a dataframe called tv\ntv &lt;- gsheet2tbl(url)\n\nNo encoding supplied: defaulting to UTF-8.\n\n\n\nWe now have two dataframes named tv and gf that we wish to merge or join.\nThe two dataframes have a column named Stock in common, which will serve as the key.\nThe following code illusrates how to merge two dataframes:\n\n\n# merging dataframes\nM.df &lt;- merge(tv, gf , id = \"Stock\")\n\n\nWe now have a new dataframe named M.df, which contains the data got from merging the two dataframes tv and gf."
  },
  {
    "objectID": "05ReadingData.html#tibbles",
    "href": "05ReadingData.html#tibbles",
    "title": "5  Reading Data",
    "section": "5.4 Tibbles",
    "text": "5.4 Tibbles\n\nA tibble is a contemporary and enhanced variant of a R data frame that is part of the tidyverse package collection.\nTibbles are created and manipulated using the dplyr package, which provides a suite of functions optimized for data manipulation.\nThe following characteristics distinguish a tibble from a conventional data frame:\nTibbles must always have unique, non-empty column names. Tibbles do not permit the creation or modification of columns using partial matching of column names. Tibbles improve the output of large datasets by displaying by default only a few rows and columns.\nTibbles have a more consistent behavior for subsetting, with the use of [[ always returning a vector or NULL, and [] always returning a tibble.\nHere is an example of using the tibble() function in dplyr to construct a tibble:\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# Create a tibble\nmy_tibble &lt;- tibble(\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(25, 30, 35),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# Print the tibble\nmy_tibble\n\n# A tibble: 3 × 3\n  name      age gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 Alice      25 F     \n2 Bob        30 M     \n3 Charlie    35 M     \n\n\n\nThis will generate a tibble consisting of three columns (name, age, and gender) and three rows of data. Note that the column names are preserved and the tibble is printed in a compact and legible manner.\n\n\n5.4.1 Converting a dataframe into a tibble\n\n# Create a data frame\nmy_df &lt;- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(25, 30, 35),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# Convert the data frame to a tibble\nmy_tibble &lt;- as_tibble(my_df)\n\n# Print the tibble\nmy_tibble\n\n# A tibble: 3 × 3\n  name      age gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 Alice      25 F     \n2 Bob        30 M     \n3 Charlie    35 M     \n\n\n\nThis assigns the tibble representation of the data frame my_df to the variable my_tibble.\nNote that the resulting tibble has the same column names and data as the original data frame, but has the additional characteristics and behaviors of a tibble.\n\n\n\n5.4.2 Converting a tibble into a dataframe\n\nlibrary(dplyr)\n\n# Convert the tibble to a data frame\nmy_df &lt;- as.data.frame(my_tibble)\n\n# Print the data frame\nmy_df\n\n     name age gender\n1   Alice  25      F\n2     Bob  30      M\n3 Charlie  35      M\n\n\n\nA tibble offers several advantages over a data frame in R:\n\n\nLarge datasets can be printed with greater clarity and precision using Tibbles. By default, they only print the first few rows and columns, making it simpler to read and comprehend the data structure.\nBetter subsetting behavior: With [[always returning a vector or NULL and [] always returning a tibble, Tibbles have a more consistent subsetting behavior. This facilitates the subset and manipulation of data without unintended consequences.\nConsistent naming: Tibbles always have column names that are distinct and non-empty. This makes it simpler to refer to specific columns and prevents errors caused by duplicate or unnamed column names.\nMore informative errors: Tibbles provides more informative error messages that make it simpler to diagnose and resolve data-related problems.\nFewer surprises: Tibbles have more stringent constraints than data frames, resulting in fewer surprises and unexpected behavior when manipulating data."
  },
  {
    "objectID": "05ReadingData.html#references",
    "href": "05ReadingData.html#references",
    "title": "5  Reading Data",
    "section": "5.5 References",
    "text": "5.5 References\n[1]\nR Core Team. (2021). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing. https://www.R-project.org/\nR Core Team. (2022). Vectors, Lists, and Arrays. R Documentation. https://cran.r-project.org/doc/manuals/r-release/R-intro.html#vectors-lists-and-arrays\nWickham, H., & Grolemund, G. (2016). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media, Inc.\nR Core Team. (2022, March 2). Data Frames. R Documentation. https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame\n[2]\nOpenIntro. (2022). 1.3 RStudio and working directory. In Introductory Statistics with Randomization and Simulation (1st ed.). https://www.openintro.org/book/isrs/\nR Core Team. (2021). getwd(): working directory; setwd(dir): change working directory. In R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://stat.ethz.ch/R-manual/R-devel/library/base/html/getwd.html\nR Core Team. (2021). getwd(): working directory; setwd(dir): change working directory. In R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://stat.ethz.ch/R-manual/R-devel/library/base/html/setwd.html"
  }
]