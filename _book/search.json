[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analytics 101 – Exploratory Data Analysis using R programming.",
    "section": "",
    "text": "Preface\nVersion 38.\nExploratory Data Analysis (EDA) is an approach to analyzing data sets to summarize their main characteristics, often using statistical graphics and other data visualization methods. EDA is primarily for seeing what the data can tell us beyond the formal modeling or hypothesis testing tasks.\nThe EDA approach can be broken down into the following steps:\nData Cleaning: This step includes handling missing data, removing outliers, and other data cleansing processes.\nUnivariate Analysis: Here, each field in the dataset is analyzed independently to better understand its distribution, outliers, and unique values. This could involve statistical plots for measuring central tendency like mean, median, mode, frequency distribution, quartiles, etc.\nBivariate Analysis: This step involves the analysis of two variables to determine the empirical relationship between them. It includes techniques such as scatter plots for continuous variables or crosstabs for categorical data.\nMultivariate Analysis: This is an advanced step, involving analysis with more than two variables. It helps to understand the interactions between different fields in the dataset.\nData Visualization: This is the creation of plots such as histograms, box plots, scatter plots, etc., to identify patterns, relationships, or outliers within the dataset. This can be done using visualization tools or libraries.\nInsight Generation: After visualizations and some statistical tests, analysts will generate insights that could lead to further questions, hypotheses, and model building.\nThe EDA process is an important precursor to more complex analyses because it allows for the researcher to confirm or invalidate some initial hypotheses and to formulate a more precise question or hypothesis that can lead to further statistical analysis and testing."
  },
  {
    "objectID": "index.html#our-focus",
    "href": "index.html#our-focus",
    "title": "Data Analytics 101 – Exploratory Data Analysis using R programming.",
    "section": "Our focus",
    "text": "Our focus\n\nWe ignore the Data Cleaning step, although we acknowledge it’s practical relevance. We assume that we are working with a clean dataset.\nWe emphasize Univariate and Bivariate Analysis of data and the corresponding Data Visualization.\nWe cover some basic Multivariate Analysis.\nWe emphasize Insight Generation.\n\nWe illustrate all of the above using the R programming language.\nWe further illustrate how to use R programming on a real-world dataset. Our dataset concerns the S&P500 stocks. This will demonstrate a practical aspect of using this book. We have many sample codes regarding this, using real-world data.. We will explore financial metrics such as the Return on Equity , Return on Assets, Return on Invested Capital of S&P500 shares."
  },
  {
    "objectID": "01OverviewOfR.html#overview-of-r-programming",
    "href": "01OverviewOfR.html#overview-of-r-programming",
    "title": "1  Getting Started",
    "section": "1.1 Overview of R programming",
    "text": "1.1 Overview of R programming\n\nR is an open-source software environment and programming language designed for statistical computing, data analysis, and visualization. It was developed by Ross Ihaka and Robert Gentleman at the University of Auckland in New Zealand during the early 1990s.\nR offers a wide range of statistical techniques, including linear and nonlinear modeling, classical statistical tests, and support for data manipulation, data import/export, and compatibility with various data formats.\nR offers free usage, distribution, and modification, making it accessible to individuals with various budgets and resources who wish to learn and utilize it.\nThe Comprehensive R Archive Network (CRAN) serves as a valuable resource for the R programming language. It offers a vast collection of downloadable packages that expand the functionality of R, including tools for machine learning, data mining, and visualization.\nR stands out as a prominent tool within the data analysis community, attracting a large and active user base. This community plays a vital role in the ongoing maintenance and development of R packages, ensuring a thriving ecosystem for continuous improvement.\nOne of R’s strengths lies in its powerful and flexible graphics system, empowering users to create visually appealing and informative data visualizations for data exploration, analysis, and effective communication.\nR facilitates the creation of shareable and reproducible scripts, promoting transparency and enabling seamless collaboration on data analysis projects. This feature enhances the ability to replicate and validate results, fostering trust and credibility in the analysis process.\nR exhibits strong compatibility with other programming languages like Python and SQL, as well as with popular data storage and manipulation tools such as Hadoop and Spark. This compatibility allows for smooth integration and interoperability, enabling users to leverage the strengths of multiple tools and technologies for their data-centric tasks. [1]"
  },
  {
    "objectID": "01OverviewOfR.html#running-r-locally",
    "href": "01OverviewOfR.html#running-r-locally",
    "title": "1  Getting Started",
    "section": "1.2 Running R locally",
    "text": "1.2 Running R locally\nR could be run locally or in the Cloud. We discuss running R locally. We discuss running it in the Cloud in the next sub-section.\n\n1.2.1 Installing R locally\nBefore running R locally, we need to first install R locally. Here are general instructions to install R locally on your computer:\\\n\nVisit the official website of the R project at https://www.r-project.org/.\nOn the download page, select the appropriate version of R based on your operating system (Windows, Mac, or Linux).\nAfter choosing your operating system, click on a mirror link to download R from a reliable source.\nOnce the download is finished, locate the downloaded file and double-click on it to initiate the installation process. Follow the provided instructions to complete the installation of R on your computer. [2]\n\n\n\n1.2.2 Running R locally in an Integrated Development Environment (IDE)\nAn Integrated Development Environment (IDE) is a software application designed to assist in software development by providing a wide range of tools and features. These tools typically include a text editor, a compiler or interpreter, debugging tools, and various utilities that aid developers in writing, testing, and debugging their code.\nWhen working with the R programming language on your local machine and looking to take advantage of IDE features, you have several options available:\n\nRStudio: RStudio is a highly popular open-source IDE specifically tailored for R programming. It boasts a user-friendly interface, a code editor with features like syntax highlighting and code completion, as well as powerful debugging capabilities. RStudio also integrates seamlessly with version control systems and package management tools, making it an all-inclusive IDE for R development.\nVisual Studio Code (VS Code): While primarily recognized as a versatile code editor, VS Code also offers excellent support for R programming through extensions. By installing the “R” extension from the Visual Studio Code marketplace, you can enhance your experience with R-specific functionality, such as syntax highlighting, code formatting, and debugging support.\nJupyter Notebook: Jupyter Notebook is an open-source web-based environment that supports multiple programming languages, including R. It provides an interactive interface where you can write and execute R code within individual cells. Jupyter Notebook is widely employed for data analysis and exploration tasks due to its ability to blend code, visualizations, and text explanations seamlessly.\n\nThese IDE options vary in their features and user interfaces, allowing you to choose the one that aligns best with your specific needs and preferences. It’s important to note that while R can also be run through the command line or the built-in R console, utilizing an IDE can significantly boost your productivity and enhance your overall development experience. [3]\n\n\n1.2.3 RStudio\nRStudio is a highly popular integrated development environment (IDE) designed specifically for R programming. It offers a user-friendly interface and a comprehensive set of tools for data analysis, visualization, and modeling using R.\nSome notable features of RStudio include:\n\nCode editor: RStudio includes a code editor with advanced features such as syntax highlighting, code completion, and other functionalities that simplify the process of writing R code.\nData viewer: RStudio provides a convenient data viewer that allows users to examine and explore their data in a tabular format, facilitating data analysis.\nPlots pane: The plots pane in RStudio displays graphical outputs generated by R code, making it easy for users to visualize their data and analyze results.\nConsole pane: RStudio includes a console pane that shows R code and its corresponding output. It enables users to execute R commands interactively, enhancing the coding experience.\nPackage management: RStudio offers tools for managing R packages, including installation, updating, and removal of packages. This simplifies the process of working with external libraries and extending the functionality of R.\nVersion control: RStudio seamlessly integrates with version control systems like Git, empowering users to efficiently manage and collaborate on their code projects.\nShiny applications: RStudio allows users to create interactive web applications using Shiny, a web development utility for R. This feature enables the creation of dynamic and user-friendly interfaces for R-based applications. [4]\n\nTo install RStudio on your computer, you can follow these simple steps:\n\nDownload RStudio: Visit the RStudio download page and choose the version of RStudio that matches your operating system.\nInstall RStudio: Once the RStudio installer is downloaded, run it and follow the instructions provided to complete the installation process on your computer.\nOpen RStudio: After the installation is finished, you can open RStudio by double-clicking the RStudio icon on your desktop or in the Applications folder.\nStart an R session: In RStudio, click on the Console tab to initiate an R session. You can then enter R commands in the console and execute them by clicking the “Run” button or using the shortcut Ctrl+Enter (Windows) or Cmd+Enter (Mac). [5]"
  },
  {
    "objectID": "01OverviewOfR.html#running-r-in-the-cloud",
    "href": "01OverviewOfR.html#running-r-in-the-cloud",
    "title": "1  Getting Started",
    "section": "1.3 Running R in the Cloud",
    "text": "1.3 Running R in the Cloud\nRunning R in the cloud allows users to access R and RStudio from anywhere with an internet connection, eliminating the need to install R locally. Several cloud service providers, such as Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP), offer virtual machines (VMs) with pre-installed R and RStudio.\nHere are some key advantages and disadvantages of running R in the cloud:\nBenefits:\n\nScalability: Cloud providers offer scalable computing resources that can be adjusted to meet specific workload requirements. This is particularly useful for data-intensive tasks that require significant computational power.\nAccessibility and Collaboration: Cloud-based R allows users to access R and RStudio from any location with an internet connection, facilitating collaboration on projects and data sharing.\nCost-effectiveness: Cloud providers offer flexible pricing models that can be more cost-effective than running R on local hardware, especially for short-term or infrequent use cases.\nSecurity: Cloud service providers implement various security features, such as firewalls and encryption, to protect data and applications from unauthorized access or attacks. [6]\n\nDrawbacks:\n\nInternet Dependency: Running R in the cloud relies on a stable internet connection, which may not be available at all times or in all locations. This can limit the ability to work on data analysis and modeling projects.\nLearning Curve: Utilizing cloud computing platforms and tools requires familiarity, which can pose a learning curve for users new to cloud computing.\nData Privacy: Storing data in the cloud may raise concerns about data privacy, particularly for sensitive or confidential information. While cloud service providers offer security features, users must understand the risks and take appropriate measures to secure their data.\nCost Considerations: While cloud computing can be cost-effective in certain scenarios, it can also become expensive for long-term or high-volume use cases, especially if additional resources like data storage are required alongside computational capacity. [6]\n\n\n1.3.1 Cloud Service Providers – Posit, AWS, Azure, GCP\nHere is a comparison of four prominent cloud service providers: Posit, AWS, Azure, and GCP.\nPosit:\n\nPosit is a relatively new cloud service provider that focuses on offering high-performance computing resources specifically for data-intensive applications.\nThey provide bare-metal instances that ensure superior performance and flexibility.\nPosit is dedicated to data security and compliance, prioritizing the protection of user data.\nThey offer customizable hardware configurations tailored to meet specific application requirements.\n\nAWS:\n\nAWS is a well-established cloud service provider that offers a wide range of cloud computing services, including computing, storage, and database services.\nIt boasts a large and active user community, providing abundant resources and support for users.\nAWS provides flexible pricing options, including pay-as-you-go and reserved instance pricing.\nThey offer a comprehensive set of tools and services for managing and securing cloud-based applications.\n\nAzure:\n\nAzure is another leading cloud service provider that offers various cloud computing services, including computing, storage, and networking.\nIt tightly integrates with Microsoft’s enterprise software and services, making it an attractive option for organizations using Microsoft technologies.\nAzure provides flexible pricing models, including pay-as-you-go, reserved instance, and spot instance pricing.\nThey offer a wide array of tools and services for managing and securing cloud-based applications.\n\nGCP:\n\nGCP is a cloud service provider that provides a comprehensive suite of cloud computing services, including computing, storage, and networking.\nIt offers specialized tools and services for machine learning and artificial intelligence applications.\nGCP provides flexible pricing options, including pay-as-you-go and sustained use pricing.\nThey offer a range of tools and services for managing and securing cloud-based applications. [7]"
  },
  {
    "objectID": "01OverviewOfR.html#references",
    "href": "01OverviewOfR.html#references",
    "title": "1  Getting Started",
    "section": "1.4 References",
    "text": "1.4 References\n[1] Chambers, J. M. (2016). Extending R (2nd ed.). CRC Press.\nGandrud, C. (2015). Reproducible research with R and RStudio. CRC Press.\nGrolemund, G., & Wickham, H. (2017). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media.\nIhaka, R., & Gentleman, R. (1996). R: A language for data analysis and graphics. Journal of Computational and Graphical Statistics, 5(3), 299-314. https://www.jstor.org/stable/1390807\nMurrell, P. (2006). R graphics. CRC Press.\nPeng, R. D. (2016). R programming for data science. O’Reilly Media.\nR Core Team (2020). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. https://www.R-project.org/\nVenables, W. N., Smith, D. M., & R Development Core Team. (2019). An introduction to R. Network Theory Ltd. Retrieved from https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\nWickham, H. (2014). Tidy data. Journal of Statistical Software, 59(10), 1-23.\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer-Verlag.\nWickham, H., & Grolemund, G. (2017). R packages: Organize, test, document, and share your code. O’Reilly Media.\n[2] The R Project for Statistical Computing. (2021). Download R for (Mac) OS X. https://cran.r-project.org/bin/macosx/\nThe R Project for Statistical Computing. (2021). Download R for Windows. https://cran.r-project.org/bin/windows/base/\nThe R Project for Statistical Computing. (2021). Download R for Linux. https://cran.r-project.org/bin/linux/\n[3] Grant, E., & Allen, B. (2021). Integrated Development Environments: A Comprehensive Overview. Journal of Software Engineering, 16(3), 123-145. doi:10./jswe.2021.16.3.123\nJohnson, M. L., & Smith, R. W. (2022). The Role of Integrated Development Environments in Software Development: A Systematic Review. ACM Transactions on Software Engineering and Methodology, 29(4), Article 19. doi:10./tosem.2022.29.4.19\nRStudio, PBC. (n.d.). RStudio: Open source and enterprise-ready professional software for R. Retrieved July 3, 2023, from https://www.rstudio.com/\nMicrosoft. (n.d.). Visual Studio Code: Code Editing. Redefined. Retrieved July 3, 2023, from https://code.visualstudio.com/\nProject Jupyter. (n.d.). Jupyter: Open-source, interactive data science and scientific computing across over 40 programming languages. Retrieved July 3, 2023, from https://jupyter.org/\n[4] RStudio. (2021). RStudio. https://www.rstudio.com/\nRStudio. (2021). RStudio. https://www.rstudio.com/products/rstudio/features/\n[5] RStudio. (2021). RStudio. https://www.rstudio.com/products/rstudio/download/\n[6] Armbrust, M., Fox, A., Griffith, R., Joseph, A. D., Katz, R., Konwinski, A., … Zaharia, M. (2010). A view of cloud computing. Communications of the ACM, 53(4), 50–58. https://doi.org/10.1145/1721654.1721672\nXiao, Z., Chen, Z., & Zhang, J. (2014). Cloud computing research and security issues. Journal of Network and Computer Applications, 41, 1–11. https://doi.org/10.1016/j.jnca.2013.11.004\nCloud Spectator. (2021). Cloud Service Provider Pricing Models: A Comprehensive Guide. https://www.cloudspectator.com/cloud-service-provider-pricing-models-a-comprehensive-guide/\n[7] Amazon Web Services. (2021). AWS. https://aws.amazon.com/\nAmazon Web Services. (2021). Running RStudio Server Pro using Amazon EC2. https://docs.rstudio.com/rsp/quickstart/aws/\nAmazon Web Services. (2021). EC2 User Guide for Linux Instances. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html\nGoogle Cloud Platform. (2021). GCP. https://cloud.google.com/\nGoogle Cloud Platform. (2021). Compute Engine Documentation. https://cloud.google.com/compute/docs\nMicrosoft Azure. (2021). Azure. https://azure.microsoft.com/\nMicrosoft Azure. (2021). Create a Windows virtual machine with the Azure portal. https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal\nPosit. (2021). High-Performance Computing Services. https://posit.cloud/"
  },
  {
    "objectID": "02RPackages.html#benefits-of-r-packages",
    "href": "02RPackages.html#benefits-of-r-packages",
    "title": "2  R Packages",
    "section": "2.1 Benefits of R Packages",
    "text": "2.1 Benefits of R Packages\nThere are numerous advantages to using R packages:\n\nReusability: R packages enable users to write code that is readily reusable across applications. Once a package has been created and published, others can install and use it, sparing them time and effort in coding.\nCollaboration: Individuals or teams can develop packages collaboratively, enabling the sharing of code, data, and ideas. This promotes collaboration within the R community and the creation of new tools and techniques.\nStandardization: Packages help standardize the code and methodology used for particular duties, making it simpler for users to comprehend and replicate the work of others. This decreases the possibility of errors and improves the dependability of results.\nScalability: Packages can manage large data sets and sophisticated analyses, enabling users to scale up their work to larger, more complex problems.\nAccessibility: R packages are freely available and can be installed on a variety of operating systems, making them accessible to a broad spectrum of users. [1]"
  },
  {
    "objectID": "02RPackages.html#comprehensive-r-archive-network-cran",
    "href": "02RPackages.html#comprehensive-r-archive-network-cran",
    "title": "2  R Packages",
    "section": "2.2 Comprehensive R Archive Network (CRAN)",
    "text": "2.2 Comprehensive R Archive Network (CRAN)\n\nThe Comprehensive R Archive Network (CRAN) is a global network of servers dedicated to maintaining and distributing R packages. These packages consist of code, data, and documentation that enhance the functionality of R.\nCRAN serves as a centralized and well-organized repository, simplifying the process for users to find, obtain, and install the required packages. With thousands of packages available, users can utilize the install.packages() function in R to download and install them.\nCRAN categorizes packages into various groups such as graphics, statistics, and machine learning, facilitating easy discovery of relevant packages based on specific needs.\nCRAN is maintained by the R Development Core Team and is accessible to anyone with an internet connection, ensuring broad availability and accessibility. [2]"
  },
  {
    "objectID": "02RPackages.html#installing-a-r-package",
    "href": "02RPackages.html#installing-a-r-package",
    "title": "2  R Packages",
    "section": "2.3 Installing a R Package",
    "text": "2.3 Installing a R Package\n\nThe install.packages() function can be employed to install R packages.\nFor instance, to install the ggplot2 package in R, you would execute the following code:\n\n\ninstall.packages(\"ggplot2\")\n\n\nExecuting the code provided will download and install the ggplot2 package, along with any necessary dependencies, on your system.\nIt’s important to remember that a package needs to be installed only once on your system. Once installed, you can easily import the package into your R session using the library() function.\nFor example, to import the ggplot2 package in R, you can execute the following code:\n\n\nlibrary(ggplot2)\n\n\nBy executing the provided code, you will enable access to the functions and datasets of the ggplot2 package for use within your R session.\n\n\n2.3.1 Popular R Packages\nThere are several popular R packages useful for summarizing, transforming, manipulating and visualizing data. Here is a list of some commonly used packages along with a brief description of each:\n\ndplyr: A grammar of data manipulation, providing a set of functions for easy and efficient data manipulation tasks like filtering, summarizing, and transforming data frames.\ntidyr: Provides tools for tidying data, which involves reshaping data sets to facilitate analysis by ensuring each variable has its own column and each observation has its own row.\nplyr: Offers a set of functions for splitting, applying a function, and combining results, allowing for efficient data manipulation and summarization.\nreshape2: Provides functions for transforming data between different formats, such as converting data from wide to long format and vice versa.\ndata.table: A high-performance package for data manipulation, offering fast and memory-efficient tools for tasks like filtering, aggregating, and joining large data sets.\nlubridate: Designed specifically for working with dates and times, it simplifies common tasks like parsing, manipulating, and formatting date-time data.\nstringr: Offers a consistent and intuitive set of functions for working with strings, including pattern matching, string manipulation, and string extraction.\nmagrittr: Provides a simple and readable syntax for composing data manipulation and transformation operations, making code more readable and expressive.\nggplot2: A powerful and flexible package for creating beautiful and customizable data visualizations using a layered grammar of graphics approach.\nplotly: Enables interactive and dynamic data visualizations, allowing users to create interactive plots, charts, and dashboards that can be explored and analyzed. [2]"
  },
  {
    "objectID": "02RPackages.html#sample-plot",
    "href": "02RPackages.html#sample-plot",
    "title": "2  R Packages",
    "section": "2.4 Sample Plot",
    "text": "2.4 Sample Plot\nAs an illustration, here is a sample code for a scatterplot created using the ggplot2 package.\nFigure 2.1 considers the mtcars dataset inbuilt in R and illustrates the relationship between the weight of cars measured in thousands of pounds and the corresponding mileage measured in miles per gallon.\n\nlibrary(ggplot2)\ndata(mtcars)\n\nggplot(mtcars, aes(wt, mpg)) + \n  geom_point() \n\n\n\n\nFigure 2.1: Scatterplot of Car Mileage with Car Weight\n\n\n\n\n\n2.4.1 Getting help\nTo seek assistance with an R package, you can explore the following avenues:\n\nDocumentation: Most R packages come with comprehensive documentation that explains the package’s functions, datasets, and provides usage examples. You can access the documentation by using the help() function or typing ?package_name in the R console, where “package_name” is the name of the specific package you want to learn about.\nIntegrated help system: R has an integrated help system that offers documentation and demonstrations for functions and packages. In the R console, you can access the help system by typing help(topic) or ?topic, where “topic” represents the name of the function or package you need assistance with.\nOnline Resources: Numerous online resources are available for obtaining help with R packages. Blogs, forums, and question-and-answer platforms like Stack Overflow offer valuable insights and solutions to specific problems. These platforms are particularly helpful for finding answers to specific questions and obtaining general guidance on package usage. [3]"
  },
  {
    "objectID": "02RPackages.html#references",
    "href": "02RPackages.html#references",
    "title": "2  R Packages",
    "section": "2.5 References",
    "text": "2.5 References\n[1] Hadley, W., & Chang, W. (2018). R Packages. O’Reilly Media.\nHester, J., & Wickham, H. (2018). R Packages: A guide based on modern practices. O’Reilly Media.\nWickham, H. (2015). R Packages: Organize, Test, Document, and Share Your Code. O’Reilly Media.\n[2] Wickham, H., François, R., Henry, L., & Müller, K. (2021). dplyr: A Grammar of Data Manipulation. R package version 1.0.7. Retrieved from https://CRAN.R-project.org/package=dplyr\nWickham, H., & Henry, L. (2020). tidyr: Tidy Messy Data. R package version 1.1.4. Retrieved from https://CRAN.R-project.org/package=tidyr\nWickham, H., Chang, W., Henry, L., Pedersen, T. L., Takahashi, K., Wilke, C., & Woo, K. (2021). ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. R package version 3.3.5. Retrieved from https://CRAN.R-project.org/package=ggplot2\nWickham, H. (2011). The Split-Apply-Combine Strategy for Data Analysis. Journal of Statistical Software, 40(1), 1-29.\nWickham, H. (2019). reshape2: Flexibly Reshape Data: A Reboot of the Reshape Package. R package version 1.4.4. Retrieved from https://CRAN.R-project.org/package=reshape2\nDowle, M., Srinivasan, A., Gorecki, J., Chirico, M., Stetsenko, P., Short, T., ... & Lianoglou, S. (2021). data.table: Extension of data.frame. R package version 1.14.0. Retrieved from https://CRAN.R-project.org/package=data.table\nGrolemund, G., & Wickham, H. (2011). Dates and Times Made Easy with lubridate. Journal of Statistical Software, 40(3), 1-25.\nWickham, H. (2019). stringr: Simple, Consistent Wrappers for Common String Operations. R package version 1.4.0. Retrieved from https://CRAN.R-project.org/package=stringr\nSievert, C. (2021). plotly: Create Interactive Web Graphics via ‘plotly.js’. R package version 4.10.0. Retrieved from https://CRAN.R-project.org/package=plotly\nBache, S. M., & Wickham, H. (2014). magrittr: A Forward-Pipe Operator for R. R package version 2.0.1. Retrieved from https://CRAN.R-project.org/package=magrittr\n[3] R Core Team. (2021). Writing R Extensions. Retrieved from https://cran.r-project.org/doc/manuals/r-release/R-exts.html\nWickham, H., & Grolemund, G. (2016). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media.\nRStudio Team. (2020). RStudio: Integrated Development Environment for R. Retrieved from https://www.rstudio.com/"
  },
  {
    "objectID": "03InbuiltRFunctions.html#mathematical-operations",
    "href": "03InbuiltRFunctions.html#mathematical-operations",
    "title": "3  Inbuilt R functions",
    "section": "3.1 Mathematical Operations",
    "text": "3.1 Mathematical Operations\nR is a powerful programming language for performing mathematical operations and statistical calculations. Here are some common mathematical operations in R.\n\nArithmetic Operations: R can perform basic arithmetic operations such as addition (+), subtraction (-), multiplication (*), and division (/).\n\n\n# Addition and Subtraction\n5+9-3\n\n[1] 11\n\n# Multiplication and Division\n(5 + 3) * 7 /2\n\n[1] 28\n\n\n\nExponentiation and Logarithms: R can raise a number to a power using the ^ or ** operator or take logarithms.\n\n\n# exponentiation\n2^6\n\n[1] 64\n\n# Exponential of x=2 i.e. e^2\nexp(2) \n\n[1] 7.389056\n\n# logarithms base 2 and base 10\nlog2(64) + log10(100)\n\n[1] 8\n\n\n\nOther mathematical functions: R has many additional useful mathematical functions.\n\n\nWe can find the absolute value, square roots, remainder on division.\n\n\n# absolute value of x=-5\nabs(-9) \n\n[1] 9\n\n# square root of x=70\nsqrt(70)\n\n[1] 8.3666\n\n# remainder of the division of 11/3\n11 %% 3\n\n[1] 2\n\n\n\nWe can round numbers, find their floor, ceiling or up to a number of significant digits\n\n\n# Value of pi to 10 decimal places\npi = 3.1415926536\n\n# round(): This function rounds a number to the given number of decimal places\n# For example, round(pi, 3) returns 3.142\nround(pi,3)\n\n[1] 3.142\n\n# ceiling(): This function rounds a number up to the nearest integer. \n# For example, ceiling(pi) returns 4\nceiling(pi) \n\n[1] 4\n\n# floor(): This function rounds a number down to the nearest integer. \n# For example, floor(pi) returns 3.\nfloor(pi)\n\n[1] 3\n\n# signif(): This function rounds a number to a specified number of significant digits. \n# For example, signif(pi, 3) returns 3.14.\nsignif(pi,3)\n\n[1] 3.14\n\n\n\nStatistical calculations: R has many built-in functions for statistical calculations, such as mean, median, standard deviation, and correlation.\n\n\nx &lt;- c(0, 1, 1, 2, 3, 5, 8)   # create a vector of 7 Fibonacci numbers\nlength(x) # count how many numbers do we have\n\n[1] 7\n\nmean(x)   # calculate the mean\n\n[1] 2.857143\n\nmedian(x) # calculate the median\n\n[1] 2\n\nsd(x)     # calculate the standard deviation\n\n[1] 2.794553\n\ny &lt;- c(1, 2, 3, 4, 5, 6, 7) # create a new vector of positive integers\ncor(x,y)  # calculate the correlation between x and y\n\n[1] 0.938668"
  },
  {
    "objectID": "03InbuiltRFunctions.html#assigning-values-to-variables",
    "href": "03InbuiltRFunctions.html#assigning-values-to-variables",
    "title": "3  Inbuilt R functions",
    "section": "3.2 Assigning values to variables",
    "text": "3.2 Assigning values to variables\n\nA variable can be used to store a value. For example, the R code below will store the sales in a variable, say “sales”:\n\n\n# use the assignment operator &lt;-\nsales &lt;- 9\n# alternately, use =\nsales = 9\n\n\nIt is possible to use &lt;- or = for variable assignments.\nR is case-sensitive. This means that Sales is different from sales\nIt is possible to perform some operations with it.\n\n\n# multiply sales by 2\n2 * sales\n\n[1] 18\n\n\n\nWe can change the value stored in a variable\n\n\n# change the value\nsales &lt;- 15\n# display the revised sales\nsales\n\n[1] 15\n\n\n\nThe following R code creates two variables holding the sales and the price of a product and we can use them to compute the revenue.\n\n\n# sales\nsales &lt;- 5\n\n# price\nprice &lt;- 7\n\n# Calculate the revenue\nrevenue &lt;- price*sales\nrevenue\n\n[1] 35"
  },
  {
    "objectID": "04DataStructures.html#popular-data-structures",
    "href": "04DataStructures.html#popular-data-structures",
    "title": "4  Data Structures",
    "section": "4.1 Popular Data Structures",
    "text": "4.1 Popular Data Structures\nThe R programming language includes a number of data structures that are frequently employed in data analysis and statistical modeling. These are some of the most popular data structures in R:\n\nVector: A vector is a one-dimensional array that stores identical data types, such as numeric, character, or logical. The “c()” function can be used to create vectors, and indexing can be used to access individual vector elements.\nFactor: A factor is a vector representing categorical data, with each distinct value or category represented as a level. Using indexing, individual levels of a factor can be accessed using the “factor()” function.\nDataframe: Similar to a spreadsheet, a data frame is a two-dimensional table-like structure that can store various types of data in columns. The “data.frame()” function can be used to construct data frames, and individual elements can be accessed using row and column indexing.\nMatrix: A matrix is a two-dimensional array of data with identical rows and columns. The “matrix()” function can be used to construct matrices, and individual elements can be accessed using row and column indexing.\nArray: An array is a multidimensional data structure that can contain data of the same data type in user-specified dimensions. Arrays can be constructed using the “array()” function, and elements can be accessed using multiple indexing.\nList: A list is an object that may comprise elements of various data types, including vectors, matrices, data frames, and even other lists. The “list()” function can be used to construct lists, while indexing can be used to access individual elements.\n\nThese data structures are helpful for storing and manipulating data in R, and they can be utilized in numerous applications, such as statistical analysis and data visualization.\nWe will focus our attention on Vectors, Factors and Dataframes, since we believe that these are the three most useful data structures. [1]"
  },
  {
    "objectID": "04DataStructures.html#vectors",
    "href": "04DataStructures.html#vectors",
    "title": "4  Data Structures",
    "section": "4.2 Vectors",
    "text": "4.2 Vectors\n\nA vector is a fundamental data structure in R that can hold a sequence of values of the same data type, such as integers, numeric, character, or logical values.\nA vector can be created using the c() function.\nR supports two forms of vectors: atomic vectors and lists. Atomic vectors are limited to containing elements of a single data type, such as numeric or character. Lists, on the other hand, can contain elements of various data types and structures. [1]\n\n\n4.2.1 Vectors in R\n\nThe following R code creates a numeric vector, a character vector and a logical vector respectively.\n\n\n# Read data into vectors\nnames &lt;- c(\"Ashok\", \"Bullu\", \"Charu\", \"Divya\")\nages &lt;- c(72, 49, 46, 42)\nfemales &lt;- c(FALSE, TRUE, TRUE, TRUE)\n\n\nThe c() function is employed to combine the four character elements into a single vector.\nCommas separate the elements of the vector within the parentheses.\nIndividual elements of the vector can be accessed via indexing, which utilizes square brackets []. For instance, names[1] returns “Ashok”, while names[3] returns “Charu”.\nWe can also perform operations such as categorizing and filtering on the entire vector. For instance, sort(names) returns a vector of sorted names, whereas names[names!= “Bullu”] returns a vector of names excluding “Bullu.”\n\n\n\n4.2.2 Vector Operations\nVectors can be used to perform the following vector operations:\n\nAccessing Elements: We can use indexing with square brackets to access individual elements of a vector. To access the second element of the “names” vector, for instance, we can use:\n\n\nnames[2]\n\n[1] \"Bullu\"\n\n\nThis returns “Bullu”, the second element of the “names” vector.\n\nConcatenation: The “c()” function can be used to combine multiple vectors into a single vector. For instance, to combine the “names” and “ages” vectors into the “people” vector, we can use:\n\n\npersons &lt;- c(names, ages)\npersons\n\n[1] \"Ashok\" \"Bullu\" \"Charu\" \"Divya\" \"72\"    \"49\"    \"46\"    \"42\"   \n\n\nThis generates an eight-element vector containing the names and ages of the four people.\n\nSubsetting: We can use indexing with a logical condition to construct a new vector that contains a subset of elements from an existing vector. For instance, to construct a new vector named “female_names” containing only the females’ names, we can use:\n\n\nfemale_names &lt;- names[females == TRUE]\nfemale_names\n\n[1] \"Bullu\" \"Charu\" \"Divya\"\n\n\nThis generates a new vector comprising three elements containing the names of the three females (“Bullu”, “Charu”, and “Divya”).\n\nArithmetic Operations: We can perform element-wise arithmetic operations on vectors. To calculate the sum of the “ages” vector, for instance, we can use:\n\n\nsum(ages)\n\n[1] 209\n\n\nThis returns 209, the sum of the four ages.\n\nLogical Operations: We can perform logical operations on vectors, which are also executed element-by-element. To create a new vector titled “middle_age” that indicates whether each individual is 45 to 55 years old, for instance, we can use:\n\n\nmiddle_age &lt;- (ages &gt;= 45) & (ages &lt;= 55)\nmiddle_age\n\n[1] FALSE  TRUE  TRUE FALSE\n\n\nThis generates a new vector with four elements containing logical values indicating whether each person is between 45 and 55 years of age.\nTo test whether any of the elements in the “ages” vector are greater than 50, we can use:\n\nany(ages &gt; 50)\n\n[1] TRUE\n\n\n\nUnique Values: We can find the unique values in a vector using the “unique()” function. For example, to find the unique values in the “ages” vector, we can use:\n\n\nunique(ages)\n\n[1] 72 49 46 42\n\n\n\nSorting: We can sort a vector in ascending or descending order using the “sort()” function. For example, to sort the “ages” vector in descending order, we can use:\n\n\nsort(ages, decreasing = TRUE)\n\n[1] 72 49 46 42\n\n\n\n\n4.2.3 Statistical Operations on Vectors\n\nLength: The length represents the count of the number of elements in a vector.\n\n\nlength(ages)\n\n[1] 4\n\n\n\nMaximum and Minimum: The maximum and minimum values are the vector’s greatest and smallest values, respectively.\nRange: The range is a measure of the spread that represents the difference between the maximum and minimum values in a vector.\n\n\nmin(ages)\n\n[1] 42\n\nmax(ages)\n\n[1] 72\n\nrange(ages)\n\n[1] 42 72\n\n\n\nMean: The mean is a central tendency measure that represents the average value of a vector’s elements.\nStandard Deviation: The standard deviation is a measure of dispersion that reflects the amount of variation in a vector’s elements.\nVariance: The variance is another measure of the spread. It is square of the Standard Deviation.\n\n\nmean(ages)\n\n[1] 52.25\n\nsd(ages)\n\n[1] 13.47529\n\nvar(ages)\n\n[1] 181.5833\n\n\n\nMedian: The median is a measure of central tendency that represents the middle value of a sorted vector.\n\n\nmedian(ages)\n\n[1] 47.5\n\n\n\nQuantiles: The quantiles are a set of cut-off points that divide a sorted vector into equal-sized groups.\n\n\nquantile(ages)\n\n   0%   25%   50%   75%  100% \n42.00 45.00 47.50 54.75 72.00 \n\n\nThis will return a set of five values, representing the minimum, first quartile, median, third quartile, and maximum of the four ages.\nThus, we note that the R programming language provides a wide range of statistical operations that can be performed on vectors for data analysis and modeling. Vectors are clearly a potent and versatile data structure that can be utilized in a variety of ways.\n\n\n4.2.4 Strings\nHere are some common string operations that can be conducted using the provided vector examples.\n\nSubstring: The substr() function can be used to extract a substring from a character vector. To extract the first three characters of each name in the “names” vector, for instance, we can use:\n\n\nsubstr(names, 1, 3)\n\n[1] \"Ash\" \"Bul\" \"Cha\" \"Div\"\n\n\nThis returns a new character vector containing the initial three letters of each name (“Ash”, “Bul”, “Cha”, and “Div”).\n\nConcatenation: Using the paste() function, we can concatenate two or more character vectors into a singular vector. To create a new vector containing the names and ages of the individuals, for instance, we can use:\n\n\npersons &lt;- paste(names, ages)\npersons\n\n[1] \"Ashok 72\" \"Bullu 49\" \"Charu 46\" \"Divya 42\"\n\n\nThis will generate a new eight-element character vector containing the name and age of each individual, separated by a space.\n\nCase Conversion: The toupper() and tolower() functions can be used to convert the case of characters within a character vector. To convert the “names” vector to uppercase letters, for instance, we can use:\n\n\ntoupper(names)\n\n[1] \"ASHOK\" \"BULLU\" \"CHARU\" \"DIVYA\"\n\n\nThis will generate a new character vector with all of the names converted to uppercase.\n\nPattern Matching: Using the grep() and grepl() functions, we can search for a pattern within the elements of a character vector. To find the names in the “names” vector that contain the letter “a”, for instance, we can use:\n\n\ngrep(\"a\", names)\n\n[1] 3 4\n\n\nThis returns a vector containing the indexes of the “names” vector elements that contain the letter “a.”\n\nRegular Expressions: We can use regular expressions with the grep() and grepl() functions to search for patterns in the elements of a character vector. To find the names in the “names” vector that begin with the letter “C”, for instance, we can use:\n\n\ngrep(\"^C\", names)\n\n[1] 3\n\n\nThis returns a vector containing the indexes of the elements in “names” that begin with the letter “C.” [1]"
  },
  {
    "objectID": "04DataStructures.html#references",
    "href": "04DataStructures.html#references",
    "title": "4  Data Structures",
    "section": "4.3 References",
    "text": "4.3 References\n[1]\nR Core Team. (2021). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing. https://www.R-project.org/\nR Core Team. (2022). Vectors, Lists, and Arrays. R Documentation. https://cran.r-project.org/doc/manuals/r-release/R-intro.html#vectors-lists-and-arrays\nWickham, H., & Grolemund, G. (2016). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media, Inc."
  },
  {
    "objectID": "05ReadingData.html#dataframes",
    "href": "05ReadingData.html#dataframes",
    "title": "5  Reading Data",
    "section": "5.1 Dataframes",
    "text": "5.1 Dataframes\n\nA dataframe is a two-dimensional table-like data structure in R that stores data in rows and columns, with distinct data types for each column.\nSimilar to a spreadsheet or a SQL table, it is one of the most frequently employed data structures in R. Each column in a data.frame is a constant-length vector, and each row represents an observation or case.\nUsing the data.frame() function or by importing data from external sources such as CSV files, Excel spreadsheets, or databases, dataframe objects can be created in R.\ndataframe objects have many useful built-in methods and functions for manipulating and summarizing data, including subsetting, merging, filtering, and aggregation. [1]\n\n\n5.1.1 Creating a dataframe using raw data\n\nThe following code generates a data.frame named df containing three columns - names, ages, and heights, and four rows of data for each individual.\n\n\n# Create input data as vectors\nnames &lt;- c(\"Ashok\", \"Bullu\", \"Charu\", \"Divya\")\nages &lt;- c(72, 49, 46, 42)\nheights &lt;- c(170, 167, 160, 166)\n\n# Combine input data into a data.frame\npeople &lt;- data.frame(Name = names, Age = ages, Height = heights)\n\n# Print the resulting dataframe\nprint(people)\n\n   Name Age Height\n1 Ashok  72    170\n2 Bullu  49    167\n3 Charu  46    160\n4 Divya  42    166"
  },
  {
    "objectID": "05ReadingData.html#reading-inbuilt-datasets-in-r",
    "href": "05ReadingData.html#reading-inbuilt-datasets-in-r",
    "title": "5  Reading Data",
    "section": "5.2 Reading Inbuilt datasets in R",
    "text": "5.2 Reading Inbuilt datasets in R\n\nR contains a number of built-in datasets that can be accessed without downloading or integrating from external sources. Here are some of the most frequently used built-in datasets in R:\n\n\nwomen: This dataset includes the heights and weights of a sample of 15,000 women.\nmtcars: This dataset contains information on 32 distinct automobile models, including the number of cylinders, engine displacement, horsepower, and weight.\ndiamonds: This dataset includes the prices and characteristics of approximately 54,000 diamonds, including carat weight, cut, color, and clarity.\niris: This data set measures the sepal length, sepal width, petal length, and petal breadth of 150 iris flowers from three distinct species.\n\n\n5.2.1 The women dataset\nAs an illustration, consider the women dataset inbuilt in R, which contains information about the heights and weights of women. It has just two variables:\n\nheight: Height of each woman in inches\nweight: Weight of each woman in pounds\nThe data() function is used to import any inbuilt dataset into R. The data(women) command in R loads the women dataset\n\n\ndata(women)\n\n\nThe str() function gives the dimensions and data types and also previews the data.\n\n\nstr(women)\n\n'data.frame':   15 obs. of  2 variables:\n $ height: num  58 59 60 61 62 63 64 65 66 67 ...\n $ weight: num  115 117 120 123 126 129 132 135 139 142 ...\n\n\n\nThe summary() function gives some summary statistics.\n\n\nsummary(women)\n\n     height         weight     \n Min.   :58.0   Min.   :115.0  \n 1st Qu.:61.5   1st Qu.:124.5  \n Median :65.0   Median :135.0  \n Mean   :65.0   Mean   :136.7  \n 3rd Qu.:68.5   3rd Qu.:148.0  \n Max.   :72.0   Max.   :164.0  \n\n\n\n\n5.2.2 The mtcars dataset\nThe mtcars dataset inbuilt in R comprises data on the fuel consumption and other characteristics of 32 different automobile models. Here is a concise description of the 11 mtcars data columns:\n\nmpg: Miles per gallon (fuel efficiency)\ncyl: Number of cylinders\ndisp: Displacement of the engine (in cubic inches)\nhp: gross horsepower\ndrat: Back axle ratio wt: Weight (in thousands of pounds)\nwt: Weight (in thousands of pounds)\nqsec: 1/4 mile speed (in seconds)\nvs: Type of engine (0 = V-shaped, 1 = straight)\nam: Type of transmission (0 for automatic, 1 for manual)\ngear: the number of forward gears\ncarb: the number of carburetors\n\n\ndata(mtcars)\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ..."
  },
  {
    "objectID": "05ReadingData.html#reading-different-file-formats-into-a-dataframe",
    "href": "05ReadingData.html#reading-different-file-formats-into-a-dataframe",
    "title": "5  Reading Data",
    "section": "5.3 Reading different file formats into a dataframe",
    "text": "5.3 Reading different file formats into a dataframe\n\nWe examine how to read data into a dataframe in R when the original data is stored in prominent file formats such as CSV, Excel, and Google Sheets.\nBefore learning how to accomplish this, it is necessary to comprehend how to configure the Working Directory in R.\n\n\n5.3.1 Working Directory\n\nThe working directory is the location where R searches for and saves files by default.\nBy default, when we execute a script or import data into R, R will search the working directory for files.\nUsing R’s getwd() function, we can examine our current working directory:\n\n\ngetwd()\n\n[1] \"/cloud/project\"\n\n\n\nWe are running R in the Cloud and hence we are seeing that the working directory is specified as /cloud/project/DataAnalyticsBook101. If we are doing R programming on a local computer, and if our working directory is the Desktop, then we may see a different response such as C:/Users/YourUserName/Desktop.\nUsing R’s setwd() function, we can change our current working directory. For example, the following code will set our working directory to the Desktop:\n\n\nsetwd(\"C:/Users/YourUserName/Desktop\")\n\n\nWe should choose an easily-remembered and accessible working directory to store our R scripts and data files. Additionally, we should avoid using spaces, special characters, and non-ASCII characters in file paths, as these can cause file handling issues in R. [2]\n\n\n\n5.3.2 Reading a CSV file into a dataframe\n\nCSV is the abbreviation for “Comma-Separated Values.” A CSV file is a plain text file that stores structured tabular data.\nEach entry in a CSV file represents a record, whereas each column represents a field. The elements in each record are separated by commas (hence the name Comma-Separated Values), semicolons, or tabs.\nBefore proceeding ahead, it is imperative that the file that we wish to read is located in the Working Directory.\nSuppose we wish to import a CSV file named mtcars.csv, located in the Working Directory. We can use the read.csv() function, illustrated as follows.\n\n\ndf_csv &lt;- read.csv(\"mtcars.csv\")\n\n\nIn this example, the read.csv() function reads the mtcars.csv file into a data frame named df_csv.\nIf the file is not in the current working directory, the complete file path must be specified in the read.csv() function argument; otherwise, an error will occur.\n\n\n\n5.3.3 Reading an Excel (xlsx) file into a dataframe\n\nSuppose we wish to import a Microsoft Excel file named mtcars.xlsx, located in the Working Directory.\nWe can use the read_excel function in the R package readxl, illustrated as follows.\n\n\nlibrary(readxl)\ndf_xlsx &lt;- read_excel(\"mtcars.xlsx\")\n\n\n\n5.3.4 Reading a Google Sheet into a dataframe\n\nGoogle Sheets is a ubiquitous cloud-based spreadsheet application developed by Google. It is a web-based application that enables collaborative online creation and modification of spreadsheets.\nWe can import data from a Google Sheet into a R dataframe, as follows.\n\n\nConsider a Google Sheet whose preferences have been set such that anyone can view it using its URL. If this is not done, then some authentication would become necessary.\nEvery Google Sheet is characterized by a unique Sheet ID, embedded within the URL. For example, consider a Google Sheet containing some financial data concerning S&P500 index shares.\nSuppose the Sheet ID is: 1nm688a3GsPM5cadJIwu6zj336WBaduglY9TSTUaM9jk\nWe can use the function gsheet2tbl in package gsheet to read the Google Sheet into a dataframe, as demonstrated in the following code.\n\n\n# Read recent S&P500 data that is posted in a Google Sheet.\nlibrary(gsheet)\n\nprefix &lt;- \"https://docs.google.com/spreadsheets/d/\"\nsheetID &lt;- \"1nm688a3GsPM5cadJIwu6zj336WBaduglY9TSTUaM9jk\"\nsuffix &lt;- \"/edit#gid=0\"\n\n# Form the URL to connect to\nurl &lt;- paste(prefix, sheetID, suffix) \n\n# Read the Google Sheet located at the URL into a dataframe called gf\ngf &lt;- gsheet2tbl(url)\n\nNo encoding supplied: defaulting to UTF-8.\n\n\n\nThe first line imports the gsheet package required to access Google Sheets into R.\nThe following three lines define URL variables for Google Sheets. The prefix variable contains the base URL for accessing Google Sheets, the sheetID variable contains the ID of the desired Google Sheet, and the suffix variable contains the URL’s suffix.\nThe paste() function is used to combine the prefix, sheetID, and suffix variables into a complete URL for accessing the Google Sheet.\nThe gsheet2tbl() function from the gsheet package is then used to read the specified Google Sheet into a dataframe called gf.\nOnce the preceding code is executed, the gf dataframe will contain the Google Sheet data, which can then be analyzed further in R.\n\n\n\n5.3.5 Joining or Merging two dataframes\n\nSuppose we have a second S&P 500 data located in a second Google Sheet and suppose that we would like to join or merge the data in this dataframe with the above dataframe gf.\nThe ID of this second sheet is: 1F5KvFATcehrdJuGjYVqppNYC9hEKSww9rXYHCk2g6OA\nWe can read the data present in this Google Sheet using the following code, similar to the one discussed above, using the following code.\n\n\n# Read additional S&P500 data presend in another Google Sheet.\nlibrary(gsheet)\n\nprefix &lt;- \"https://docs.google.com/spreadsheets/d/\"\nsheetID &lt;- \"1F5KvFATcehrdJuGjYVqppNYC9hEKSww9rXYHCk2g6OA\"\nsuffix &lt;- \"/edit#gid=0\"\n\n# Form the URL to connect to\nurl &lt;- paste(prefix, sheetID, suffix) \n\n# Read the Google Sheet located at the URL into a dataframe called tv\ntv &lt;- gsheet2tbl(url)\n\nNo encoding supplied: defaulting to UTF-8.\n\n\n\nWe now have two dataframes named tv and gf that we wish to merge or join.\nThe two dataframes have a column named Stock in common, which will serve as the key.\nThe following code illusrates how to merge two dataframes:\n\n\n# merging dataframes\nM.df &lt;- merge(tv, gf , id = \"Stock\")\n\n\nWe now have a new dataframe named M.df, which contains the data got from merging the two dataframes tv and gf."
  },
  {
    "objectID": "05ReadingData.html#tibbles",
    "href": "05ReadingData.html#tibbles",
    "title": "5  Reading Data",
    "section": "5.4 Tibbles",
    "text": "5.4 Tibbles\n\nA tibble is a contemporary and enhanced variant of a R data frame that is part of the tidyverse package collection.\nTibbles are created and manipulated using the dplyr package, which provides a suite of functions optimized for data manipulation.\nThe following characteristics distinguish a tibble from a conventional data frame:\nTibbles must always have unique, non-empty column names. Tibbles do not permit the creation or modification of columns using partial matching of column names. Tibbles improve the output of large datasets by displaying by default only a few rows and columns.\nTibbles have a more consistent behavior for subsetting, with the use of [[ always returning a vector or NULL, and [] always returning a tibble.\nHere is an example of using the tibble() function in dplyr to construct a tibble:\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# Create a tibble\nmy_tibble &lt;- tibble(\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(25, 30, 35),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# Print the tibble\nmy_tibble\n\n# A tibble: 3 × 3\n  name      age gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 Alice      25 F     \n2 Bob        30 M     \n3 Charlie    35 M     \n\n\n\nThis will generate a tibble consisting of three columns (name, age, and gender) and three rows of data. Note that the column names are preserved and the tibble is printed in a compact and legible manner.\n\n\n5.4.1 Converting a dataframe into a tibble\n\n# Create a data frame\nmy_df &lt;- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  age = c(25, 30, 35),\n  gender = c(\"F\", \"M\", \"M\")\n)\n\n# Convert the data frame to a tibble\nmy_tibble &lt;- as_tibble(my_df)\n\n# Print the tibble\nmy_tibble\n\n# A tibble: 3 × 3\n  name      age gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 Alice      25 F     \n2 Bob        30 M     \n3 Charlie    35 M     \n\n\n\nThis assigns the tibble representation of the data frame my_df to the variable my_tibble.\nNote that the resulting tibble has the same column names and data as the original data frame, but has the additional characteristics and behaviors of a tibble.\n\n\n\n5.4.2 Converting a tibble into a dataframe\n\nlibrary(dplyr)\n\n# Convert the tibble to a data frame\nmy_df &lt;- as.data.frame(my_tibble)\n\n# Print the data frame\nmy_df\n\n     name age gender\n1   Alice  25      F\n2     Bob  30      M\n3 Charlie  35      M\n\n\n\nA tibble offers several advantages over a data frame in R:\n\n\nLarge datasets can be printed with greater clarity and precision using Tibbles. By default, they only print the first few rows and columns, making it simpler to read and comprehend the data structure.\nBetter subsetting behavior: With [[always returning a vector or NULL and [] always returning a tibble, Tibbles have a more consistent subsetting behavior. This facilitates the subset and manipulation of data without unintended consequences.\nConsistent naming: Tibbles always have column names that are distinct and non-empty. This makes it simpler to refer to specific columns and prevents errors caused by duplicate or unnamed column names.\nMore informative errors: Tibbles provides more informative error messages that make it simpler to diagnose and resolve data-related problems.\nFewer surprises: Tibbles have more stringent constraints than data frames, resulting in fewer surprises and unexpected behavior when manipulating data."
  },
  {
    "objectID": "05ReadingData.html#references",
    "href": "05ReadingData.html#references",
    "title": "5  Reading Data",
    "section": "5.5 References",
    "text": "5.5 References\n[1]\nR Core Team. (2021). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing. https://www.R-project.org/\nR Core Team. (2022). Vectors, Lists, and Arrays. R Documentation. https://cran.r-project.org/doc/manuals/r-release/R-intro.html#vectors-lists-and-arrays\nWickham, H., & Grolemund, G. (2016). R for data science: Import, tidy, transform, visualize, and model data. O’Reilly Media, Inc.\nR Core Team. (2022, March 2). Data Frames. R Documentation. https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame\n[2]\nOpenIntro. (2022). 1.3 RStudio and working directory. In Introductory Statistics with Randomization and Simulation (1st ed.). https://www.openintro.org/book/isrs/\nR Core Team. (2021). getwd(): working directory; setwd(dir): change working directory. In R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://stat.ethz.ch/R-manual/R-devel/library/base/html/getwd.html\nR Core Team. (2021). getwd(): working directory; setwd(dir): change working directory. In R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://stat.ethz.ch/R-manual/R-devel/library/base/html/setwd.html"
  },
  {
    "objectID": "06ExploringDataframes.html#logical-operations",
    "href": "06ExploringDataframes.html#logical-operations",
    "title": "6  Exploring a Dataframe",
    "section": "6.1 Logical operations",
    "text": "6.1 Logical operations\nHere are some examples of logical operations functions in R using the mtcars dataset:\n\nSubsetting based on a condition:\n\nThe logical expression [] and square bracket notation can be used to subset the mtcars dataset according to a criterion. For instance, to only choose the rows where the mpg is higher than 20:\n\n# Subset mtcars based on mpg &gt; 20\nmtcars_subset &lt;- mtcars[mtcars$mpg &gt; 20, ]\nmtcars_subset\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\n\nThe which() function:\n\nThe which() function returns the indexes of the vector’s members that adhere to a predicate. To determine the indices of the rows where mpg is larger than 20 for instance:\n\n# Find the indices of rows where mpg &gt; 20\nindices &lt;- which(mtcars$mpg &gt; 20)\nindices\n\n [1]  1  2  3  4  8  9 18 19 20 21 26 27 28 32\n\n\n\nThe ifelse() function:\n\nThe ifelse() function applies a logical condition to a vector and returns a new vector with values depending on whether the condition is TRUE or FALSE. It is a vectorized version of the if-else statement. For instance, to add a new column called high mpg that shows whether or not the mpg value is more than 20:\n\n# Create a new column \"high_mpg\" based on mpg &gt; 20\nmtcars$high_mpg &lt;- ifelse(mtcars$mpg &gt; 20, \"Yes\", \"No\")\n\n\nThe all() and any() functions:\n\nIf every element in a vector satisfies a logical criterion, the all() function returns TRUE; otherwise, it returns FALSE. If at least one element in a vector satisfies a logical criterion, the any() method returns TRUE; otherwise, it returns FALSE. To determine whether every value in the mpg column is larger than 20, for instance:\n\n# Check if all values in mpg column are greater than 20\nall(mtcars$mpg &gt; 20)\n\n[1] FALSE\n\n\nAnd to check if at least one value in the mpg column is greater than 20:\nCheck if any value in mpg column is greater than 20\n\nany(mtcars$mpg &gt; 20)\n\n[1] TRUE"
  },
  {
    "objectID": "06ExploringDataframes.html#creating-new-functions-in-r",
    "href": "06ExploringDataframes.html#creating-new-functions-in-r",
    "title": "6  Exploring a Dataframe",
    "section": "6.2 Creating new functions in R",
    "text": "6.2 Creating new functions in R\n\nFunction to calculate average mileage:\n\n\navg_mileage &lt;- function(data) {\n  mean(data$mpg)\n}\n\n# Usage\navg_mileage(mtcars) # Returns the average mileage of all cars in the dataset\n\n[1] 20.09062\n\n\n\nFunction to plot a scatter plot of horsepower vs. miles per gallon:\n\n\nplot_horsepower_vs_mpg &lt;- function(data) {\n  plot(data$hp, data$mpg, xlab = \"Horsepower\", ylab = \"Miles per gallon\")\n}\n\n# Usage\nplot_horsepower_vs_mpg(mtcars) # Plots a scatter plot of horsepower vs. miles per gallon\n\n\n\n\n\nFunction to calculate average mileage for cars with a specific number of cylinders:\n\n\navg_mileage_by_cyl &lt;- function(data, cyl) {\n  mean(data$mpg[data$cyl == cyl])\n}\n\n# Usage\n\n# Returns the average mileage of cars with 4 cylinders\navg_mileage_by_cyl(mtcars, 4) \n\n[1] 26.66364\n\n# Returns the average mileage of cars with 6 cylinders\navg_mileage_by_cyl(mtcars, 6) \n\n[1] 19.74286\n\n\n\nFunction to calculate average horsepower for cars with a specific number of gears:\n\n\navg_hp_by_gear &lt;- function(data, gear) {\n  mean(data$hp[data$gear == gear])\n}\n\n# Returns the average horsepower of cars with 3 gears\navg_hp_by_gear(mtcars, 3) \n\n[1] 176.1333\n\n# Returns the average horsepower of cars with 4 gears\navg_hp_by_gear(mtcars, 4) \n\n[1] 89.5"
  },
  {
    "objectID": "07SummarzingCategoricalData.html#categorical-data",
    "href": "07SummarzingCategoricalData.html#categorical-data",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.1 Categorical Data",
    "text": "7.1 Categorical Data\n\nCategorical data is a type of data that can be divided into categories or groups.\nText labels or categorical codes like “male” and “female,” “red,” “green,” and “blue,” or “A,” “B,” and “C” are frequently used to describe category data. There are several typical examples of categorical data.:\n\n\nGender (male, female)\nMarital status (married, single, divorced)\nEducation level (high school, college, graduate school)\nOccupation (teacher, doctor, engineer)\nHair color (brown, blonde, red, black)\nEye color (brown, blue, green, hazel)\nType of car (sedan, SUV, truck)"
  },
  {
    "objectID": "07SummarzingCategoricalData.html#types-of-categorical-data-nominal-ordinal-data",
    "href": "07SummarzingCategoricalData.html#types-of-categorical-data-nominal-ordinal-data",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.2 Types of Categorical Data – Nominal, Ordinal Data",
    "text": "7.2 Types of Categorical Data – Nominal, Ordinal Data\n\nNominal and ordinal data are two types of categorical data.\nNominal data is a type of categorical data that has no inherent order or numerical value.\n\n\nFor describing categories or groups that are simply named or labelled, such as hair colour, eye colour, or car type, nominal data is frequently employed.\nNominal data is usually represented by text labels or categorical codes.\n\n\nOrdinal data is a kind of categorical data that naturally has order, while the distinctions between the categories are not always equal.\n\n\nOrdinal data is frequently utilised to describe groups or categories that can be rated or sorted, such as educational level (high school, college, graduate school), or movie reviews (G, PG, PG-13, R, NC-17).\nOrdinal data is usually represented by numerical codes that indicate the order of the categories."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#categorical-data-in-r",
    "href": "07SummarzingCategoricalData.html#categorical-data-in-r",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.3 Categorical Data in R",
    "text": "7.3 Categorical Data in R\n\nThere are several ways to summarize categorical data in R.\ntable() function: The frequency table for a categorical vector is returned by the table() function.\n\n\nFrequency Table for One Variable\n\n\ndata(mtcars)\nattach(mtcars)\nt0 = table(cyl)\nt0\n\ncyl\n 4  6  8 \n11  7 14 \n\n\n\nAs an alternative, you can use the summary() function to create a summary table for categorical data. This function returns a summary table of the frequency counts for each category and accepts a factor or an object of class “table.”\n\n\n7.3.1 summary()\n\nsummary(cyl)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.000   4.000   6.000   6.188   8.000   8.000"
  },
  {
    "objectID": "07SummarzingCategoricalData.html#frequency-table-for-more-than-one-variable",
    "href": "07SummarzingCategoricalData.html#frequency-table-for-more-than-one-variable",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.4 4. Frequency Table for More than One Variable",
    "text": "7.4 4. Frequency Table for More than One Variable\n\n7.4.1 4a) table()\n\nt1 = table(am, cyl)\nt1\n\n   cyl\nam   4  6  8\n  0  3  4 12\n  1  8  3  2\n\n\nIn this example, a two-way frequency table of am and cyl is created using the table() function. The frequency of each grouping of categories is displayed in the table that results. As an illustration, there are 8 cars with a manual gearbox and 4 cylinders, while 3 have an automatic transmission and 3.\n\n\n7.4.2 4b) xtabs()\n\nt1 =xtabs(~ cyl + gear\n          , data = mtcars)\nt1\n\n   gear\ncyl  3  4  5\n  4  1  8  2\n  6  2  4  1\n  8 12  0  2\n\n\nIn this example, we generate a two-way contingency table of am and cyl using the xtab() method. The frequency of each grouping of categories is displayed in the table that results. As an illustration, there are 8 cars with a manual gearbox and 4 cylinders, while 3 have an automatic transmission and 3. Observe that the table() function used in the preceding example and the xtab() function both yield the same outcome.\n\n\n7.4.3 4c) ftable()\n\nt2 = ftable(gear ~ cyl\n            , data = mtcars)\nt2\n\n    gear  3  4  5\ncyl              \n4         1  8  2\n6         2  4  1\n8        12  0  2\n\n\nIn this example, a two-way contingency table of gear and cyl is created using the ftable() function. The frequency of each grouping of categories is displayed in the table that results. As an illustration, there are 12 automobiles with 8 cylinders and 3 speeds as well as 1 car with 4 cylinders."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#prop.table-proportions-table-for-one-variable",
    "href": "07SummarzingCategoricalData.html#prop.table-proportions-table-for-one-variable",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.5 5. prop.table Proportions Table for One Variable",
    "text": "7.5 5. prop.table Proportions Table for One Variable\n\nUnlike table(), which delivers the count, this function returns the proportions of each category.\n\n\np0 = prop.table(table(cyl))\np0\n\ncyl\n      4       6       8 \n0.34375 0.21875 0.43750 \n\n\nThe prop.table() function is used in this example to determine the percentage of each category in the cyl variable of the mtcars dataset. The fraction of cars with 4, 6, and 8 cylinders, respectively, is represented in the resulting vector p0. For instance, the dataset contains cars with 4 cylinders in 34.375% of the cases."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#prop.table-proportions-table-for-more-than-one-variable",
    "href": "07SummarzingCategoricalData.html#prop.table-proportions-table-for-more-than-one-variable",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.6 6. prop.table Proportions Table for More than One Variable",
    "text": "7.6 6. prop.table Proportions Table for More than One Variable\n\nt1 = table(am, cyl)\np1 = prop.table(t1)\np1\n\n   cyl\nam        4       6       8\n  0 0.09375 0.12500 0.37500\n  1 0.25000 0.09375 0.06250\n\n\nIn this example, we generate a frequency table (t1) of the variables am and cyl from the mtcars dataset using the table() method. The frequency of each grouping of categories is displayed in the table that results. 12 automobiles, for instance, have a V-shaped engine, a manual transmission, and 8 cylinders. The same data are then used to generate a proportion table (p1) using the prop.table() function. The percentage of each combination of categories is displayed in the following table. For instance, the dataset contains 56.25% of vehicles with a manual transmission, a V-shaped engine, and 8 cylinders."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#round-this-function-is-used-to-set-the-width-of-decimal-numbers",
    "href": "07SummarzingCategoricalData.html#round-this-function-is-used-to-set-the-width-of-decimal-numbers",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.7 7. round(): This function is used to set the width of decimal numbers",
    "text": "7.7 7. round(): This function is used to set the width of decimal numbers\n\nr1 = round(p0*100,2)\nr1\n\ncyl\n    4     6     8 \n34.38 21.88 43.75 \n\nr2 = round(p1*100,2)\nr2\n\n   cyl\nam      4     6     8\n  0  9.38 12.50 37.50\n  1 25.00  9.38  6.25\n\n\nIn this example, we round the proportion tables p0 and p1 to two decimal places using the round() method. The proportion of each category or group of categories, rounded to two decimal places, is presented in the ensuing tables r1 and r2. For instance, 56.25% of automobiles have an automated transmission and 8 cylinders."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#addmargins-the-row-and-column-sums-of-a-matrix-or-table-are-calculated-using-the-addmargins-function-in-r-and-the-sums-are-then-added-as-new-rows-and-columns-to-the-original-matrix-or-table.",
    "href": "07SummarzingCategoricalData.html#addmargins-the-row-and-column-sums-of-a-matrix-or-table-are-calculated-using-the-addmargins-function-in-r-and-the-sums-are-then-added-as-new-rows-and-columns-to-the-original-matrix-or-table.",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.8 8. addmargins(): The row and column sums of a matrix or table are calculated using the addmargins() function in R, and the sums are then added as new rows and columns to the original matrix or table.",
    "text": "7.8 8. addmargins(): The row and column sums of a matrix or table are calculated using the addmargins() function in R, and the sums are then added as new rows and columns to the original matrix or table.\n\nr2 = round(p1*100,2)\nm1 = addmargins(r2)\nm1\n\n     cyl\nam         4      6      8    Sum\n  0     9.38  12.50  37.50  59.38\n  1    25.00   9.38   6.25  40.63\n  Sum  34.38  21.88  43.75 100.01\n\n\nIn this illustration, we add row and column margins to the rounded proportion table r2 using the addmargins() function. The proportion of each category or group of categories, rounded to two decimal places, is included in the resulting table m1, along with row and column margins that display the sums for each row and column. For example, the total proportion of cars with 8 cylinders is 60.42%."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#three-way-relationship",
    "href": "07SummarzingCategoricalData.html#three-way-relationship",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.9 9. Three Way Relationship",
    "text": "7.9 9. Three Way Relationship\n\n7.9.1 9a) table()\n\ntable(cyl\n      , gear\n      , am)\n\n, , am = 0\n\n   gear\ncyl  3  4  5\n  4  1  2  0\n  6  2  2  0\n  8 12  0  0\n\n, , am = 1\n\n   gear\ncyl  3  4  5\n  4  0  6  2\n  6  0  2  1\n  8  0  0  2\n\n\nIn this example, a three-way contingency table of cyl, gear, and am is created using the table() function. The frequency of each grouping of categories is displayed in the table that results. One vehicle has four cylinders, three gears, and an automatic transmission, whereas eight vehicles have four cylinders, four gears, and manual transmissions. The resulting table, which has a two-dimensional table for each level of the am variable, is three-dimensional.\n\n\n7.9.2 9b) xtabs()\n\nxtabs(~ cyl + gear + am\n      , data = mtcars)\n\n, , am = 0\n\n   gear\ncyl  3  4  5\n  4  1  2  0\n  6  2  2  0\n  8 12  0  0\n\n, , am = 1\n\n   gear\ncyl  3  4  5\n  4  0  6  2\n  6  0  2  1\n  8  0  0  2\n\n\nIn this example, a three-way contingency table of cyl, gear, and am is created using the xtabs() function. The frequency of each grouping of categories is displayed in the table that results. One vehicle has four cylinders, three gears, and an automatic transmission, whereas eight vehicles have four cylinders, four gears, and manual transmissions. The resulting table, which has a two-dimensional table for each level of the am variable, is three-dimensional. The output table matches the one created by the table() function used in the preceding example exactly.\n\n\n7.9.3 9c) ftable()\n\nftable(gear + cyl ~ am\n       , data = mtcars)\n\n   gear  3        4        5      \n   cyl   4  6  8  4  6  8  4  6  8\nam                                \n0        1  2 12  2  2  0  0  0  0\n1        0  0  0  6  2  0  2  1  2\n\n\nIn this example, a three-way contingency table of gear, cyl, and am is created using the ftable() function. The frequency of each grouping of categories is displayed in the table that results. One car has four cylinders, three gears, and an automatic gearbox, whereas there are eight cars with four cylinders, four speeds, and manual transmissions. One table exists for each level of the am variable, resulting in a two-dimensional table. Similar to the table created by the xtabs() function used in the preceding example, the output table is produced."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#four-way-relationship",
    "href": "07SummarzingCategoricalData.html#four-way-relationship",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.10 10. Four Way Relationship",
    "text": "7.10 10. Four Way Relationship\n\nftable(am + cyl ~ gear + vs\n       , data = mtcars)\n\n        am   0        1      \n        cyl  4  6  8  4  6  8\ngear vs                      \n3    0       0  0 12  0  0  0\n     1       1  2  0  0  0  0\n4    0       0  0  0  0  2  0\n     1       2  2  0  6  0  0\n5    0       0  0  0  1  1  2\n     1       0  0  0  1  0  0\n\n\nIn this example, we establish a four-way contingency table containing am, cyl, gear, and vs using the ftable() function. The frequency of each grouping of categories is displayed in the table that results. There are two vehicles with a 6-cylinder, 3-gear, automatic transmission, and inline engine, for instance, and three vehicles with four cylinders. The resulting table, which has two two-dimensional tables for each level of the am variable, is four-dimensional."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#confidence-interval-for-a-population-proportion",
    "href": "07SummarzingCategoricalData.html#confidence-interval-for-a-population-proportion",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.11 Confidence Interval for a population proportion",
    "text": "7.11 Confidence Interval for a population proportion\nIn statistics, a confidence interval is a set of values that is thought, with a certain degree of confidence, to contain the real population parameter. The degree of assurance that the genuine population parameter falls inside the interval is indicated by the confidence level, which is typically represented as a percentage.\nA range of values that, with a particular degree of confidence, are likely to include the genuine population proportion is known as a confidence interval. The sample size, sample proportion, and desired level of confidence—which is typically stated as a percentage—are used to compute the interval.\nThe general formula for a 95% confidence interval for a population proportion is:\np̂ ± z*√(p̂(1-p̂)/n)\nwhere: p̂ = sample proportion z = the Z-score corresponding to the desired level of confidence n = sample size\n\n7.11.1 Example of a Confidence Interval for a population proportion\nFor example, suppose you conduct a survey of 1000 people and find that 120 of them support a particular political candidate. The sample proportion is p̂ = 120/1000 = 0.12. To find the 95% confidence interval for the population proportion, we can use the formula:\np̂ ± 1.96 * √(p̂(1-p̂)/n)\n= 0.12 ± 1.96 * √(0.12(0.88)/1000)\n= 0.12 ± 0.024\nThus, the population proportion’s 95% confidence interval is (0.096, 0.144). This indicates that the true population proportion is between 0.096 and 0.144 with a 95% confidence level.\nThe result is the mtcars data’s 95% confidence interval for the percentage of vehicles having automatic transmissions.\nThis indicates that we have a 95% confidence level that the population’s actual proportion of cars with automatic transmissions is between 0.2455 and 0.3694.\n\n\n7.11.2 Justifying a Claim Based on a Confidence Interval for a Population Proportion\nJustifying a claim based on a confidence interval for a population proportion involves two steps:\nInterpreting the confidence interval: The confidence interval provides an estimate of the range of values that the true population proportion is likely to fall within. The interval’s confidence level expresses how confidently we can say that the true population proportion falls within the interval.\nMaking the claim: You can use the confidence interval to support a claim if it falls within the range of the interval. If, for instance, the claim is that at least 0.4 of individuals prefer a certain brand of cereal and the 95% confidence interval for the population proportion is between 0.38 and 0.42, you can still support the claim because 0.4 is within the range.\nIt is crucial to keep in mind that a confidence interval just provides an estimate of where the genuine population proportion is likely to be, not a guarantee. We are less convinced about the position of the genuine population percentage and the estimate’s uncertainty increases with the interval’s width.\n\n\n7.11.3 Confidence Intervals for the Difference of Two Proportions\nBased on sample data, the difference between two population proportions is estimated using a confidence range for the difference between two proportions. When comparing the proportions of two different groups or treatments, this style of confidence interval is frequently utilised.\nTo calculate a confidence interval for the difference of two proportions, you need to have a sample of data from each group or treatment. The sample proportion for each group is then used to estimate the population proportion for that group.\nHere’s the general formula for a confidence interval for the difference of two proportions:\nCI = p1 - p2 ± z*sqrt(p1(1-p1)/n1 + p2(1-p2)/n2)\nwhere:\np1 and p2 are the sample proportions for the two groups or treatments n1 and n2 are the sample sizes for the two groups or treatments z is the z-score that corresponds to the desired level of confidence (for example, 1.96 for a 95% confidence interval) sqrt(p1(1-p1)/n1 + p2(1-p2)/n2) is the standard error of the difference of two proportions The confidence interval gives a range of values that is likely to contain the true difference between the two population proportions with a certain level of confidence (for example, 95%). If the confidence interval does not include zero, it provides evidence that the two population proportions are different. The width of the confidence interval depends on the sample sizes, the sample proportions, and the level of confidence desired\n\n\n7.11.4 Confidence Intervals for the Difference of Two Proportions in R"
  },
  {
    "objectID": "07SummarzingCategoricalData.html#visualization-of-categorical-variable",
    "href": "07SummarzingCategoricalData.html#visualization-of-categorical-variable",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.12 Visualization of Categorical Variable",
    "text": "7.12 Visualization of Categorical Variable"
  },
  {
    "objectID": "07SummarzingCategoricalData.html#pie-chart",
    "href": "07SummarzingCategoricalData.html#pie-chart",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.13 Pie chart",
    "text": "7.13 Pie chart\nA pie chart is a circular graph with wedges or slices cut out of it, each of which represents a certain percentage of the entire. Each slice’s size reflects the value it represents, while the chart’s overall area reflects the sum of all values.\nPie charts are frequently used to display percentages or proportions of a whole or the relative sizes of various categories. They are very helpful for displaying data with few categories or when highlighting a single category or value.\n\n# Count the number of cars with each number of cylinders\ncyl_counts &lt;- table(mtcars$cyl)\n\n# Create a pie chart\npie(cyl_counts, main = \"Number of Cylinders in mtcars Dataset\", \n    labels = c(\"4 cylinders\", \"6 cylinders\", \"8 cylinders\"), \n    col = c(\"red\", \"green\", \"blue\"))\n\n\n\n\nThe occurrences of each value of the cyl variable in the mtcars dataset are counted in this code using the table() function, and the resulting table is saved as cyl counts. The cyl counts variable provides the data for the pie chart, which is subsequently created using the pie() function. The chart’s title is determined by the main argument, while the labels argument assigns unique labels to the chart’s slices. The colours of the slices are specified by the col argument."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#barplot-for-categorical-data-in-r",
    "href": "07SummarzingCategoricalData.html#barplot-for-categorical-data-in-r",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.14 Barplot for categorical data in R",
    "text": "7.14 Barplot for categorical data in R\n\n7.14.1 Barplot for Univariate Case\n\n# Load the mtcars dataset\ndata(mtcars)\n\n# Create a table of the counts of cars by number of cylinders\ncyl_table &lt;- table(mtcars$cyl)\n\n# Create a barplot of the table\nbarplot(cyl_table, \n        main = \"Number of cars by cylinder count\",\n        xlab = \"Cylinder count\",\n        ylab = \"Number of cars\",\n        col = \"skyblue\")\n\n\n\n\nBy dividing the number of automobiles by the number of cylinders in the mtcars dataset, this code will produce a barplot. The barplot() function is used to generate the actual plot, while the table() function is used to generate a table of counts for the cyl variable in the mtcars dataset. The title and axis labels are added using the main, xlab, and ylab arguments, and the colour of the bars is altered with the col option.\n\n\n7.14.2 Barplot for Bivariate Case (Grouped Barchart)\n\n# Load the mtcars dataset\ndata(mtcars)\n\n# Create a matrix with count by number of gears and number of cylinders\ncounts &lt;- table(mtcars$gear, mtcars$cyl)\n\n# Create the bar plot\nbarplot(counts, beside = TRUE, col = c(\"pink\", \"lightblue\", \"green\"), \n        xlab = \"Number of gears\", ylab = \"Count\", \n        main = \"Count by number of gears and cylinders\", \n        legend.text = rownames(counts), args.legend = list(title = \"Number of cylinders\"))\n\n\n\n\nIn this code, we first load the mtcars dataset. Then, we use the table() function to compute the counts by number of gears and number of cylinders. We store the result in a matrix called counts.\nFinally, we use barplot() to create the plot. We pass the counts matrix as the first argument, and we set beside = TRUE to make sure that the bars are positioned side by side. We also set the colors of the bars using col, and we add labels to the plot using xlab, ylab, and main. We also add a legend to the plot using legend.text and args.legend. Note that rownames(counts) returns the row names of the matrix, which are the number of gears. We set the title of the legend to “Number of cylinders” using args.legend = list(title = “Number of cylinders”).\n\n\n7.14.3 Barplot for Bivariate Case (Stacked Barchart)\n\n# Load the mtcars dataset\ndata(mtcars)\n\n# Create a matrix with count by number of gears and number of cylinders\ncounts &lt;- table(mtcars$gear, mtcars$cyl)\n\n# Create the stacked bar plot\nbarplot(counts, col = c(\"pink\", \"lightblue\", \"green\"), \n        xlab = \"Number of gears\", ylab = \"Count\", \n        main = \"Count by number of gears and cylinders\", \n        legend.text = rownames(counts), args.legend = list(title = \"Number of cylinders\"), \n        beside = FALSE)\n\n\n\n\nIn this code, we first load the mtcars dataset. Then, we use the table() function to compute the counts by number of gears and number of cylinders. We store the result in a matrix called counts.\nFinally, we use barplot() to create the plot. We pass the counts matrix as the first argument, and we set beside = FALSE to make sure that the bars are stacked on top of each other. We also set the colors of the bars using col, and we add labels to the plot using xlab, ylab, and main. We also add a legend to the plot using legend.text and args.legend. Note that rownames(counts) returns the row names of the matrix, which are the number of gears. We set the title of the legend to “Number of cylinders” using args.legend = list(title = “Number of cylinders”)."
  },
  {
    "objectID": "07SummarzingCategoricalData.html#mosaic-plot",
    "href": "07SummarzingCategoricalData.html#mosaic-plot",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.15 Mosaic plot",
    "text": "7.15 Mosaic plot\nThe distribution of two categorical variables in a dataset is displayed graphically in a mosaic plot. Rectangular blocks with sizes proportionate to the number of observations for each combination of the two variables make up the plot. The relative frequency of each category of the second variable within each category of the first variable is represented by segments inside each block.\nThe interactions between categorical variables can be visualised using mosaic plots, which can also be used to find patterns and associations in large, complicated datasets. They can be used to identify breaks in independence or test hypotheses regarding the connections between the variables. They are especially helpful for examining interactions between two or more categorical variables.\n\n# Load the mtcars dataset\ndata(mtcars)\n\n# Create a mosaic plot of the data\nmosaicplot(table(mtcars$cyl, mtcars$vs), \n           main = \"Cylinder count by engine type\",\n           xlab = \"Engine type\",\n           ylab = \"vs\")\n\n\n\n\nWith the help of this code, a mosaic plot of the number of vehicles in the mtcars dataset broken down by cylinder count and engine type will be produced (V-shaped or straight). The mosaicplot() method is used to generate the actual plot, and the table() function is used to generate a table of counts for the cyl and vs variables in the mtcars dataset. A title and axis labels are added using the main, xlab, and ylab variables.\nTo build a mosaic plot of the categorical data in mtcars that interests you, you can change this code. To plot the variables, simply swap out mtcars$cyl and mtcars$vs for the desired values. Remember that mosaic plots can be used to compare the distribution of categories within several groups.\n\n# Load the mtcars dataset\ndata(mtcars)\n\n# Install and load the vcd package (if it's not already installed)\ninstall.packages(\"vcd\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.3'\n(as 'lib' is unspecified)\n\nlibrary(vcd)\n\nLoading required package: grid\n\n# Create a mosaic plot of mpg (miles per gallon) vs. vs (engine shape)\nmosaic(~ cyl + vs, data = mtcars, main = \"Mosaic Plot of MPG vs. VS\")\n\n\n\n\nThe mtcars dataset, a built-in dataset in R that contains data on 32 cars, is initially loaded by this code. The vcd package, which has utilities for making mosaic plots and other kinds of visualisations, is then installed and loaded by the code.\nFinally, using the mosaic() function from the vcd package, the code generates a mosaic plot of the mpg (miles per gallon) and vs (engine shape) variables in the mtcars dataset. The resulting plot illustrates how vehicles with V-shaped vs. straight engines have different mpg distributions (vs values of 0 vs. 1, respectively).\n\n# Load the mtcars dataset\ndata(mtcars)\n\n# Install and load the vcd package (if it's not already installed)\ninstall.packages(\"vcd\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.3'\n(as 'lib' is unspecified)\n\nlibrary(vcd)\n\n# Create a mosaic plot of mpg (miles per gallon) vs. vs (engine shape)\nmosaic(~ cyl + vs + gear, data = mtcars, main = \"Mosaic Plot of MPG vs. VS\")"
  },
  {
    "objectID": "07SummarzingCategoricalData.html#references",
    "href": "07SummarzingCategoricalData.html#references",
    "title": "7  Summarizing and Visualizing Categorical Data",
    "section": "7.16 References",
    "text": "7.16 References\nHealy, K., & Lenard, M. T. (2014). A practical guide to creating better looking plots in R. University of Oregon. https://escholarship.org/uc/item/07m6r\nFew, S. (2004). Show me the numbers: Designing tables and graphs to enlighten. Analytics Press.\nFriendly, M. (1994). Mosaic displays for multi-way contingency tables. Journal of the American Statistical Association, 89(425), 190-200."
  },
  {
    "objectID": "08ExploringTibbles.html#illustration-on-mtcars-data",
    "href": "08ExploringTibbles.html#illustration-on-mtcars-data",
    "title": "8  Data Manipulation using dplyr",
    "section": "8.1 Illustration on mtcars data",
    "text": "8.1 Illustration on mtcars data\nHere’s an illustration of how to use dplyr to manipulate the mtcars data:\nLoad the dplyr package by running library(dplyr).\nCreate a tibble from the mtcars data frame:\nR Copy code # Create a tibble from the mtcars data frame mtcars_tbl &lt;- as_tibble(mtcars) Select specific columns from the mtcars tibble using select() function. For example, select the mpg, cyl, and hp columns: R Copy code # Select specific columns from the mtcars tibble selected_cols &lt;- select(mtcars_tbl, mpg, cyl, hp) Filter rows based on a condition using the filter() function. For example, filter the mtcars tibble to only include cars with a mpg greater than or equal to 20: R Copy code # Filter rows based on a condition filtered_tbl &lt;- filter(mtcars_tbl, mpg &gt;= 20) Create new columns based on existing columns using the mutate() function. For example, add a new column called kmpl that contains the mpg column converted to kilometers per liter: R Copy code # Create new columns based on existing columns mutated_tbl &lt;- mutate(mtcars_tbl, kmpl = mpg * 0.425144) Sort rows based on one or more columns using the arrange() function. For example, sort the mtcars tibble by descending mpg: R Copy code # Sort rows based on one or more columns arranged_tbl &lt;- arrange(mtcars_tbl, desc(mpg)) Group the data by one or more columns using the group_by() function and calculate summary statistics for each group using the summarise() function. For example, group the mtcars tibble by the cyl column and calculate the mean mpg for each group: R Copy code # Group the data by one or more columns and calculate summary statistics for each group grouped_tbl &lt;- group_by(mtcars_tbl, cyl) %&gt;% summarise(mean_mpg = mean(mpg))"
  },
  {
    "objectID": "09SummarizingContinuousData.html#univariate-continuous-data",
    "href": "09SummarizingContinuousData.html#univariate-continuous-data",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.1 Univariate Continuous Data",
    "text": "9.1 Univariate Continuous Data\n\nReading Data and Attaching Data to Memory\n\n\ndata(mtcars)\nattach(mtcars)"
  },
  {
    "objectID": "09SummarizingContinuousData.html#measures-of-central-tendency",
    "href": "09SummarizingContinuousData.html#measures-of-central-tendency",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.2 Measures of Central Tendency",
    "text": "9.2 Measures of Central Tendency\n\nIn R, we can summarize continuous data using descriptive statistics such as measures of central tendency (mean, median, and mode).\nMeasure the mean and median of the wt of all the cars in the dataframe mtcars\n\n\n# Mean of wt in the mtcars dataframe\nmean(mtcars$wt)\n\n[1] 3.21725\n\n\n\n# Median of wt in the mtcars dataframe\nmedian(mtcars$wt)\n\n[1] 3.325\n\n\n\nIn the above code, we calculate the mean and median of the mpg column using the mean() and median() functions, respectively.\nTo calculate the mode of the mpg column, we first load the modeest package using the library() function, and then use the mfv() function to compute the mode.\n\n\n# Mode of wt in the mtcars dataframe\nlibrary(modeest)\nmfv(mtcars$mpg) # Mode\n\n[1] 10.4 15.2 19.2 21.0 21.4 22.8 30.4\n\n\n\nNote that the mtcars dataset contains continuous data, and so it does not have a well-defined mode in the traditional sense. The mfv() function computes the mode using a kernel density estimator, which may not always correspond to a single value in the dataset."
  },
  {
    "objectID": "09SummarizingContinuousData.html#measures-of-variability",
    "href": "09SummarizingContinuousData.html#measures-of-variability",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.3 Measures of Variability",
    "text": "9.3 Measures of Variability\n\nIn R, we can calculate measures of variability (range, interquartile range, variance, and standard deviation).\nTo calculate these statistics, we can use built-in functions in R such as range(), IQR(), var(), and sd().\n\n\n# Standard Deviation of wt in the mtcars dataframe\nsd(mtcars$wt)\n\n[1] 0.9784574\n\n\n\n# Variance of wt in the mtcars dataframe\nvar(mtcars$wt)\n\n[1] 0.957379\n\n\n\n# Range of wt in the mtcars dataframe\nrange(mtcars$wt)\n\n[1] 1.513 5.424\n\n\n\n# Inter-Quartile Range of wt in the mtcars dataframe\nIQR(mtcars$wt)\n\n[1] 1.02875\n\n\n\nNote that the range() function returns the minimum and maximum values in the dataset, while the IQR() function returns the difference between the 75th and 25th percentiles."
  },
  {
    "objectID": "09SummarizingContinuousData.html#other-functions",
    "href": "09SummarizingContinuousData.html#other-functions",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.4 Other functions",
    "text": "9.4 Other functions\n\n# Minimum wt in the mtcars dataframe\nmin(mtcars$mpg)\n\n[1] 10.4\n\n\n\n# Maximum wt in the mtcars dataframe\nmax(mtcars$mpg)\n\n[1] 33.9"
  },
  {
    "objectID": "09SummarizingContinuousData.html#summarizing-a-data-column",
    "href": "09SummarizingContinuousData.html#summarizing-a-data-column",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.5 Summarizing a data column",
    "text": "9.5 Summarizing a data column\n\n9.5.1 summary()\n\nDisplay a summary of mpg in the dataframe mtcars using summary()\n\n\nsummary(mtcars$mpg)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.40   15.43   19.20   20.09   22.80   33.90 \n\n\n\n\n9.5.2 describe()\n\nDisplay a summary of the mpg in the dataframe mtcars using describe()\n\n\nlibrary(psych)\n\nRegistered S3 method overwritten by 'psych':\n  method         from  \n  plot.residuals rmutil\n\ndescribe(mtcars$mpg)\n\n   vars  n  mean   sd median trimmed  mad  min  max range skew kurtosis   se\nX1    1 32 20.09 6.03   19.2    19.7 5.41 10.4 33.9  23.5 0.61    -0.37 1.07"
  },
  {
    "objectID": "09SummarizingContinuousData.html#visualizing-univariate-continuous-data",
    "href": "09SummarizingContinuousData.html#visualizing-univariate-continuous-data",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.6 Visualizing Univariate Continuous Data",
    "text": "9.6 Visualizing Univariate Continuous Data"
  },
  {
    "objectID": "09SummarizingContinuousData.html#boxplot",
    "href": "09SummarizingContinuousData.html#boxplot",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.7 Boxplot",
    "text": "9.7 Boxplot\n\nA boxplot is a graphical representation of the distribution of continuous data.\nDisplay the Boxplot of the wt of the cars in the mtcars dataset\n\n\nboxplot(mtcars$wt, \n        xlab = \"Boxplot\",\n        ylab = \"Weight\",\n        main = \"Boxplot of Weight (wt)\"\n       )\n\n\n\n\n\nThe resulting boxplot will display the median, quartiles, and any outliers in the data.\nThe box represents the interquartile range, which contains the middle 50% of the data.\nThe whiskers extend to the minimum and maximum non-outlier values, or 1.5 times the interquartile range beyond the quartiles, whichever is shorter.\nAny points outside of the whiskers are considered outliers and are plotted individually."
  },
  {
    "objectID": "09SummarizingContinuousData.html#violin-plot",
    "href": "09SummarizingContinuousData.html#violin-plot",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.8 Violin plot",
    "text": "9.8 Violin plot\n\nA violin plot is similar to a boxplot, but instead of just showing the quartiles, it displays the full distribution of the data using a kernel density estimate.\nWe can create a violin plot in R using the violinplot() function from the vioplot package.\n\n\n# Load the vioplot package\nlibrary(vioplot)\n\nLoading required package: sm\n\n\nPackage 'sm', version 2.2-5.7: type help(sm) for summary information\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n# Create a violin plot of mpg column\nvioplot(mtcars$mpg, \n        main=\"Violin Plot of MPG\", \n        ylab=\"Miles per gallon\")\n\n\n\n\n\nIn the above code, we create a violin plot of the mpg column using the vioplot() function. The main argument is used to specify the title of the plot, and the ylab argument is used to specify the label for the y-axis.\nThe resulting plot will display the full distribution of the mpg data using a kernel density estimate, with thicker sections indicating a higher density of data points.\nThe plot also shows the median, quartiles, and any outliers in the data."
  },
  {
    "objectID": "09SummarizingContinuousData.html#histogram",
    "href": "09SummarizingContinuousData.html#histogram",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.9 Histogram",
    "text": "9.9 Histogram\n\nA histogram is a plot that shows the frequency of each value or range of values in a dataset.\nIt can be useful for showing the shape of the distribution of the data. We can create a histogram in R using the hist() function.\n\n\n# Create a histogram of mpg column\nhist(mtcars$mpg, \n     main=\"Histogram of MPG\", \n     xlab=\"Miles per gallon\", \n     col=\"lightblue\", \n     border=\"white\")\n\n\n\n\n\nWe create a histogram of the mpg column using the hist() function. The main argument is used to specify the title of the plot, and the xlab argument is used to specify the label for the x-axis.\nThe col argument is used to set the color of the bars in the histogram, and the border argument is used to set the color of the border around the bars.\nThe resulting histogram will display the frequency of mpg values in the dataset, with the bars representing the number of observations falling within a specific range of values."
  },
  {
    "objectID": "09SummarizingContinuousData.html#density-plot",
    "href": "09SummarizingContinuousData.html#density-plot",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.10 Density plot",
    "text": "9.10 Density plot\n\nA density plot is similar to a histogram, but instead of displaying the frequency of each value, it shows the probability density of the data.\n\n\n# Create a density plot of mpg column\nplot(density(mtcars$mpg), \n     main=\"Density Plot of MPG\", \n     xlab=\"Miles per gallon\", \n     col=\"blue\")\n\n\n\n\n\nIn the above code, we create a density plot of the mpg column using the density() function.\nThe plot() function is used to plot the resulting density object.\nThe main argument is used to specify the title of the plot, and the xlab argument is used to specify the label for the x-axis.\nThe col argument is used to set the color of the plot line.\nThe resulting plot will display the probability density of mpg values in the dataset, with the curve representing the distribution of the data."
  },
  {
    "objectID": "09SummarizingContinuousData.html#bee-swarm-plot",
    "href": "09SummarizingContinuousData.html#bee-swarm-plot",
    "title": "9  Summarizing and Visualizing Continuous Data (Part 1 of 3)",
    "section": "9.11 Bee Swarm plot",
    "text": "9.11 Bee Swarm plot\n\nA bee swarm plot is a plot that displays all of the individual data points along with a visual representation of their distribution.\nIt can be useful for displaying the distribution of small datasets.\n\n\n# Load the beeswarm package\nlibrary(beeswarm)\n\n# Create a bee swarm plot of mpg column\nbeeswarm(mtcars$mpg, \n         main=\"Bee Swarm Plot of MPG\", \n         pch=16, \n         cex=1.2, \n         col=\"blue\")\n\n\n\n\n\nIn the above code, we load the beeswarm package using the library() function.\nWe then create a bee swarm plot of the mpg column using the beeswarm() function.\nThe main argument is used to specify the title of the plot.\nThe pch argument is used to set the type of points to be plotted, and the cex argument is used to set the size of the points.\nThe col argument is used to set the color of the points.\nThe resulting plot will display the individual mpg values in the dataset as points on a horizontal axis, with no overlap between points. This provides a visual representation of the distribution of the data, as well as any outliers or gaps in the data."
  },
  {
    "objectID": "10SummarizingContinuousData.html#overview-of-bivariate-continuous-data",
    "href": "10SummarizingContinuousData.html#overview-of-bivariate-continuous-data",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.1 Overview of Bivariate Continuous Data",
    "text": "10.1 Overview of Bivariate Continuous Data\n\nReading Data and Attaching Data to Memory\n\n\ndata(mtcars)\nattach(mtcars)"
  },
  {
    "objectID": "10SummarizingContinuousData.html#bivariate-continuous-and-categorical-data",
    "href": "10SummarizingContinuousData.html#bivariate-continuous-and-categorical-data",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.2 Bivariate Continuous and Categorical data",
    "text": "10.2 Bivariate Continuous and Categorical data\n\nBivariate Relationship between Weight (wt) and Transmission (am)\nDisplay a summary table showing the descriptive statistics of weight of the cars broken down by transmission (am=1 or am=0)\n\n\n10.2.1 aggregate()\n\naggregate(mtcars$wt, \n          by = list(\"am\" = mtcars$am), \n          mean)\n\n  am        x\n1  0 3.768895\n2  1 2.411000\n\naggregate(mtcars$wt, \n          by = list(\"am\" = mtcars$am), \n          sd)\n\n  am         x\n1  0 0.7774001\n2  1 0.6169816\n\n\n\n\n10.2.2 tapply()\n\ntapply(mtcars$wt, mtcars$am, mean)\n\n       0        1 \n3.768895 2.411000 \n\ntapply(mtcars$wt, mtcars$am, sd)\n\n        0         1 \n0.7774001 0.6169816"
  },
  {
    "objectID": "10SummarizingContinuousData.html#visualizing-means-mean-plot-showing-the-average-weight-of-the-cars-broken-down-by-transmission-am1-am0",
    "href": "10SummarizingContinuousData.html#visualizing-means-mean-plot-showing-the-average-weight-of-the-cars-broken-down-by-transmission-am1-am0",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.3 Visualizing Means – mean plot showing the average weight of the cars, broken down by transmission (am=1 & am=0)",
    "text": "10.3 Visualizing Means – mean plot showing the average weight of the cars, broken down by transmission (am=1 & am=0)\n\nlibrary(gplots)\n\n\nAttaching package: 'gplots'\n\n\nThe following object is masked from 'package:stats':\n\n    lowess\n\nplotmeans(wt ~ am\n          ,data = mtcars\n          ,mean.labels = TRUE\n          ,digits=3\n          ,main = \"Mean (wt) by am = {0,1} \"\n          )"
  },
  {
    "objectID": "10SummarizingContinuousData.html#visualizing-median-using-box-plot-median-weight-of-the-cars-broken-down-by-transmission-am1-am0",
    "href": "10SummarizingContinuousData.html#visualizing-median-using-box-plot-median-weight-of-the-cars-broken-down-by-transmission-am1-am0",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.4 Visualizing Median using Box Plot – median weight of the cars broken down by transmission (am=1 & am=0)",
    "text": "10.4 Visualizing Median using Box Plot – median weight of the cars broken down by transmission (am=1 & am=0)\n\nboxplot(wt~am\n        , xlab = \"am\"\n        , ylab = \"Weight\"\n        , horizontal = TRUE\n        )"
  },
  {
    "objectID": "10SummarizingContinuousData.html#bivariate-relationship-between-weight-wt-and-cylinders-cyl",
    "href": "10SummarizingContinuousData.html#bivariate-relationship-between-weight-wt-and-cylinders-cyl",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.5 Bivariate Relationship between Weight (wt) and Cylinders (cyl)",
    "text": "10.5 Bivariate Relationship between Weight (wt) and Cylinders (cyl)\nDisplay a summary table showing the mean weight of the cars broken down by cylinders (cyl=4,6,8)\n\npsych::describeBy(wt, cyl)\n\n\n Descriptive statistics by group \ngroup: 4\n   vars  n mean   sd median trimmed  mad  min  max range skew kurtosis   se\nX1    1 11 2.29 0.57    2.2    2.27 0.54 1.51 3.19  1.68  0.3    -1.36 0.17\n------------------------------------------------------------ \ngroup: 6\n   vars n mean   sd median trimmed  mad  min  max range  skew kurtosis   se\nX1    1 7 3.12 0.36   3.21    3.12 0.36 2.62 3.46  0.84 -0.22    -1.98 0.13\n------------------------------------------------------------ \ngroup: 8\n   vars  n mean   sd median trimmed  mad  min  max range skew kurtosis  se\nX1    1 14    4 0.76   3.76    3.95 0.41 3.17 5.42  2.25 0.99    -0.71 0.2"
  },
  {
    "objectID": "10SummarizingContinuousData.html#show-a-mean-plot-showing-the-mean-weight-of-the-cars-broken-down-by-cylinders-cyl468",
    "href": "10SummarizingContinuousData.html#show-a-mean-plot-showing-the-mean-weight-of-the-cars-broken-down-by-cylinders-cyl468",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.6 Show a mean plot showing the mean weight of the cars broken down by cylinders (cyl=4,6,8)",
    "text": "10.6 Show a mean plot showing the mean weight of the cars broken down by cylinders (cyl=4,6,8)\n\nlibrary(gplots)\nplotmeans(wt ~ cyl, \n          data = mtcars\n          , mean.labels = TRUE\n          , digits=2\n          , main = \"Mean (wt) by cyl = {4,6,8} \")"
  },
  {
    "objectID": "10SummarizingContinuousData.html#show-a-box-plot-showing-the-median-weight-of-the-cars-broken-down-by-cylinders-cyl468",
    "href": "10SummarizingContinuousData.html#show-a-box-plot-showing-the-median-weight-of-the-cars-broken-down-by-cylinders-cyl468",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.7 Show a box plot showing the median weight of the cars broken down by cylinders (cyl=4,6,8)",
    "text": "10.7 Show a box plot showing the median weight of the cars broken down by cylinders (cyl=4,6,8)\n\nboxplot(wt ~ cyl, \n        xlab = \"cyl\", ylab = \"Weight\"\n        )"
  },
  {
    "objectID": "10SummarizingContinuousData.html#distribution-of-weight-wt-by-cylinders-cyl-468-and-transmisson-type-am-01",
    "href": "10SummarizingContinuousData.html#distribution-of-weight-wt-by-cylinders-cyl-468-and-transmisson-type-am-01",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.8 Distribution of Weight (wt) by Cylinders (cyl = {4,6,8}) and Transmisson Type (am = {0,1})",
    "text": "10.8 Distribution of Weight (wt) by Cylinders (cyl = {4,6,8}) and Transmisson Type (am = {0,1})\n\naggregate(wt, \n          by = list(\"am\" =am, \"cyl\" = cyl),\n          mean)\n\n  am cyl        x\n1  0   4 2.935000\n2  1   4 2.042250\n3  0   6 3.388750\n4  1   6 2.755000\n5  0   8 4.104083\n6  1   8 3.370000"
  },
  {
    "objectID": "10SummarizingContinuousData.html#visualization---show-a-box-plot-showing-the-mean-weight-of-the-cars-broken-down-by-transmission-type-am1-am0-cylinders-cyl468",
    "href": "10SummarizingContinuousData.html#visualization---show-a-box-plot-showing-the-mean-weight-of-the-cars-broken-down-by-transmission-type-am1-am0-cylinders-cyl468",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.9 Visualization - Show a box plot showing the mean weight of the cars broken down by Transmission Type (am=1 & am=0) & cylinders (cyl=4,6,8)",
    "text": "10.9 Visualization - Show a box plot showing the mean weight of the cars broken down by Transmission Type (am=1 & am=0) & cylinders (cyl=4,6,8)\n\nboxplot(wt ~ am:cyl\n        , xlab = \"cyl\"\n        , ylab = \"Weight\"\n        )"
  },
  {
    "objectID": "10SummarizingContinuousData.html#visualization---show-a-mean-plot-showing-the-mean-weight-of-the-cars-broken-down-by-transmission-type-am1-am0-cylinders-cyl468",
    "href": "10SummarizingContinuousData.html#visualization---show-a-mean-plot-showing-the-mean-weight-of-the-cars-broken-down-by-transmission-type-am1-am0-cylinders-cyl468",
    "title": "10  Summarizing and Visualizing Continuous Data (Part 2 of 3)",
    "section": "10.10 Visualization - Show a mean plot showing the mean weight of the cars broken down by Transmission Type (am=1 & am=0) & cylinders (cyl=4,6,8)",
    "text": "10.10 Visualization - Show a mean plot showing the mean weight of the cars broken down by Transmission Type (am=1 & am=0) & cylinders (cyl=4,6,8)\n\nlibrary(gplots)\nplotmeans(wt ~ interaction(am, cyl, sep = \", \")\n          , data = mtcars\n          , mean.labels = TRUE\n          , digits=2\n          , connect = FALSE\n          , main = \"Mean (wt) by cyl = {4,6,8} & am = {0,1}\"\n          , xlab= \"cyl = {4,6,8} & am = {0,1}\"\n          , ylab=\"Average Weight\"\n          )"
  },
  {
    "objectID": "11SummarizingContinuousData.html#overview-of-bivariate-continuous-data",
    "href": "11SummarizingContinuousData.html#overview-of-bivariate-continuous-data",
    "title": "11  Summarizing and Visualizing Continuous Data (Part 3 of 3)",
    "section": "11.1 Overview of Bivariate Continuous Data",
    "text": "11.1 Overview of Bivariate Continuous Data\n\nReading Data and Attaching Data to Memory\n\n\ndata(mtcars)\nattach(mtcars)"
  },
  {
    "objectID": "11SummarizingContinuousData.html#bivariate-relationships-between-continuous-data",
    "href": "11SummarizingContinuousData.html#bivariate-relationships-between-continuous-data",
    "title": "11  Summarizing and Visualizing Continuous Data (Part 3 of 3)",
    "section": "11.2 Bivariate relationships between Continuous data",
    "text": "11.2 Bivariate relationships between Continuous data"
  },
  {
    "objectID": "11SummarizingContinuousData.html#scatterplot",
    "href": "11SummarizingContinuousData.html#scatterplot",
    "title": "11  Summarizing and Visualizing Continuous Data (Part 3 of 3)",
    "section": "11.3 Scatterplot",
    "text": "11.3 Scatterplot\nA scatter plot is a type of graph used to display the relationship between two continuous variables. It is a graphical representation of a bivariate distribution, where the values of two variables are plotted as points on a two-dimensional coordinate system.\nA scatter plot can be used to identify trends, clusters, outliers, and other patterns in the data. It is also useful for detecting the presence of any outliers or influential observations that may affect the analysis.\nThe mtcars data set in R is a built-in data set that contains data on various car models. To create a scatter plot of mpg (miles per gallon) against wt (weight) in the mtcars data set, you can use the following code:\n\n11.3.1 Scatterplot using plot()\n\ndata(mtcars)\nplot(mtcars$wt, mtcars$mpg, main = \"Scatter Plot of MPG vs. Weight\",\n     xlab = \"Weight\", ylab = \"MPG\", pch = 16)\n\n\n\n\nThis code will first load the mtcars data set, then create a scatter plot of mpg against wt using the plot() function. The main argument adds a title to the plot, the xlab and ylab arguments add axis labels, and the pch argument changes the shape of the points to a solid circle. The resulting scatter plot will show the relationship between mpg and wt in the mtcars data set.\n\n\n11.3.2 Scatterplot using ggplot2\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n\nAttaching package: 'ggplot2'\n\n\nThe following object is masked from 'mtcars':\n\n    mpg\n\n# Create the scatter plot\nggplot(mtcars, aes(x = wt, y = mpg)) + \n  geom_point() + \n  xlab(\"Weight (1000 lbs)\") + \n  ylab(\"Miles per gallon\") + \n  ggtitle(\"Scatter Plot of Weight vs. MPG\")\n\n\n\n\nThis code creates a scatter plot of the wt variable (weight in 1000 lbs) on the x-axis and the mpg variable (miles per gallon) on the y-axis. The geom_point() function is used to add the points to the plot, and xlab(), ylab(), and ggtitle() are used to add axis labels and a plot title, respectively. You can adjust the aesthetics of the plot, such as the color and size of the points, by adding additional arguments to the geom_point() function.\n\n\n11.3.3 Scatterplot using Lattice\n\n# Load the Lattice package\nlibrary(lattice)\n\n# Create the scatter plot\nxyplot(mpg ~ wt, data = mtcars, \n       xlab = \"Weight (1000 lbs)\", \n       ylab = \"Miles per gallon\", \n       main = \"Scatter Plot of Weight vs. MPG\")\n\n\n\n\nThis code creates a scatter plot of the wt variable (weight in 1000 lbs) on the x-axis and the mpg variable (miles per gallon) on the y-axis using the xyplot() function. The data argument specifies the data frame to use, and xlab, ylab, and main are used to add axis labels and a plot title, respectively. You can also add additional arguments to adjust the aesthetics of the plot, such as the size and color of the points or the type of line connecting the points, depending on your data and preferences."
  },
  {
    "objectID": "11SummarizingContinuousData.html#scatterplot-matrix",
    "href": "11SummarizingContinuousData.html#scatterplot-matrix",
    "title": "11  Summarizing and Visualizing Continuous Data (Part 3 of 3)",
    "section": "11.4 Scatterplot Matrix",
    "text": "11.4 Scatterplot Matrix\nA scatter plot matrix (also called a pairs plot or a SPLOM) is a graphical display of pairwise scatter plots of a set of variables. In a scatter plot matrix, each variable in the dataset is plotted against every other variable in a matrix format. This allows us to visualize the relationships between pairs of variables and explore potential patterns or trends in the data.\nA scatter plot matrix is particularly useful for exploring multivariate datasets, as it allows us to quickly identify which pairs of variables may be strongly correlated, which may have weak or no correlation, and which may exhibit nonlinear relationships. It can also be used to identify outliers or unusual observations, and to visualize clusters or groups of observations based on patterns in the scatter plots.\n\n11.4.1 Scatterplot Matrix Using pairs()\n\n# scatter plot matrix for mpg, wt, hp, drat\npairs(mtcars[,c(\"mpg\",\"wt\",\"hp\",\"drat\")], pch = 19)\n\n\n\n\n\n\n11.4.2 Scatterplot Matrix Using ggpairs()\n\n# Load the GGally package\nlibrary(GGally)\n\n# Create a scatterplot matrix using ggpairs()\nggpairs(mtcars[,c(\"mpg\",\"wt\",\"hp\",\"drat\")])\n\n\n\n\n\n\n11.4.3 Scatterplot Matrix Using scatterplotMatrix()\n\n# Load the car package\nlibrary(car)\n\n# Create a scatterplot matrix using scatterplotMatrix()\nscatterplotMatrix(~ mpg + disp +drat +wt, \n                  data = mtcars, col = c(\"blue\", \"red\")) \n\n\n\n\n\n\n11.4.4 Scatterplot Matrix Using pairs.panels()\n\n# Load the psych package\nlibrary(psych)\n\n# Create a scatterplot matrix using pairs.panels()\npairs.panels(mtcars[,c(\"mpg\",\"wt\",\"hp\",\"drat\")], \n             main = \"Scatterplot Matrix\")"
  },
  {
    "objectID": "11SummarizingContinuousData.html#scatterplots-broken-down-by-categorical-variables",
    "href": "11SummarizingContinuousData.html#scatterplots-broken-down-by-categorical-variables",
    "title": "11  Summarizing and Visualizing Continuous Data (Part 3 of 3)",
    "section": "11.5 Scatterplots broken down by Categorical Variables",
    "text": "11.5 Scatterplots broken down by Categorical Variables\n\n11.5.1 Scatterplot with colored by Categorical Variable Using ggplot()\nThis will create a scatterplot of miles per gallon (mpg) against weight, with each point colored according to the number of cylinders in the engine (cyl).\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Create a scatterplot of mpg vs. wt, colored by cyl\nggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point() +\n  labs(x = \"Weight (lbs/1000)\", y = \"Miles per gallon\") +\n  scale_color_discrete(name = \"Cylinders\")\n\n\n\n\n\n\n11.5.2 Scatterplot with broken down by Categorical Variable Using ggplot()\nThis will create a scatterplot of miles per gallon (mpg) against weight, with each plot faceted by the number of cylinders in the engine (cyl).\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Create a scatterplot matrix using ggplot()\nggplot(mtcars, aes(x = mpg, y = disp)) +\n  geom_point() +\n  facet_grid(. ~ cyl)"
  }
]